<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitBlit安装与使用</title>
    <url>/2021/01/18/e4bb3bf545c5/</url>
    <content><![CDATA[<h1 id="GitBlit安装"><a href="#GitBlit安装" class="headerlink" title="GitBlit安装"></a>GitBlit安装</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>要求Windows电脑安装JAVA环境，在<a href="http://gitblit.github.io/gitblit/">GitBlit首页</a>可根据操作系统选择不同的版本安装。</p>
<p><img src="/images/data/20210117200211.png" alt="image-20210117200211238"></p>
<a id="more"></a>

<h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.  解压"></a>2.  解压</h2><p>文件下载后，解压至一个文件夹下即可，无需安装。下图是解压后的文件列表。</p>
<h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a><img src="/images/data/20210117200502.png" alt="image-20210117200502037">3. 配置文件</h2><p>Gitblit目录下的data文件夹中的<code>defaults.properties</code>是默认配置文件，另外需要修改<code>gitblit.properties</code>以覆盖默认配置。</p>
<ul>
<li><code>server.httpPort</code>：http协议端口号</li>
<li><code>server.httpBindInterface</code>：http服务器的ip地址</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># GITBLIT.PROPERTIES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Define your custom settings in this file and/or include settings defined in</span></span><br><span class="line"><span class="comment"># other properties files.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include Gitblit&#x27;s &#x27;defaults.properties&#x27; within your configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Gitblit will not automatically reload &quot;included&quot; properties.  Gitblit</span></span><br><span class="line"><span class="comment"># only watches the &#x27;gitblit.properties&#x27; file for modifications.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Paths may be relative to the $&#123;baseFolder&#125; or they may be absolute.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># COMMA-DELIMITED</span></span><br><span class="line"><span class="comment"># SINCE 1.7.0</span></span><br><span class="line"><span class="attr">include</span> = <span class="string">defaults.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Define your overrides or custom settings below</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Standard http port to serve.  &lt;= 0 disables this connector.</span></span><br><span class="line"><span class="comment"># On Unix/Linux systems, ports &lt; 1024 require root permissions.</span></span><br><span class="line"><span class="comment"># Recommended value: 80 or 8080</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SINCE 0.5.0</span></span><br><span class="line"><span class="comment"># RESTART REQUIRED</span></span><br><span class="line"><span class="meta">server.httpPort</span> = <span class="string">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the interface for Jetty to bind the standard connector.</span></span><br><span class="line"><span class="comment"># You may specify an ip or an empty value to bind to all interfaces.</span></span><br><span class="line"><span class="comment"># Specifying localhost will result in Gitblit ONLY listening to requests to</span></span><br><span class="line"><span class="comment"># localhost.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SINCE 0.5.0</span></span><br><span class="line"><span class="comment"># RESTART REQUIRED</span></span><br><span class="line"><span class="meta">server.httpBindInterface</span> = <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<h2 id="4-服务启动"><a href="#4-服务启动" class="headerlink" title="4.  服务启动"></a>4.  服务启动</h2><p>GitBlit目录下，在<code>installService.cmd</code>中。</p>
<ul>
<li>修改ARCH，32位系统：<code>SET ARCH=x86</code>；64位系统：<code>SET ARCH=amd64</code>。</li>
<li>添加CD为程序目录 <code>SET CD=D:\newsoft\gitblit-1.9.1</code>(安装目录)。</li>
<li><code>StartParams</code>里的启动参数，置空</li>
</ul>
<p><img src="/images/data/20210118004401.png" alt="image-20210118004401684"></p>
<p>服务注册表中即可查看该服务，可重启、停止。</p>
<p><img src="/images/data/20210118004537.png" alt="image-20210118004536991"></p>
<h2 id="5-浏览器访问"><a href="#5-浏览器访问" class="headerlink" title="5. 浏览器访问"></a>5. 浏览器访问</h2><p>账号密码默认<code>admin/admin</code></p>
<p><img src="/images/data/20210118004801.png" alt="image-20210118004801412"></p>
<h1 id="GitBlit简单使用"><a href="#GitBlit简单使用" class="headerlink" title="GitBlit简单使用"></a>GitBlit简单使用</h1><h2 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="1.克隆仓库"></a>1.克隆仓库</h2><p>&emsp;&emsp;进入仓库概况页面，在版本仓库地址栏选择<code>http</code>协议的<strong>git</strong>链接，复制该链接。</p>
<p><img src="/images/data/20201029220747.png" alt="image-20201029220747735"></p>
<p>&emsp;&emsp;选择本地合适的文件路径，打开cmd窗口克隆该仓库即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git <span class="built_in">clone</span> http://couragehe@XX.XX.XX.XX:9999/r/demo.git</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20201029221614.png" alt="image-20201029221614544"></p>
<h2 id="2-账户认证"><a href="#2-账户认证" class="headerlink" title="2.账户认证"></a>2.账户认证</h2><p>&emsp;&emsp;打开项目路径的cmd窗口，推送项目至远程<code>git</code>仓库，首次推送会弹出windows安全认证，输入密码即可保存至windows。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>



<p><img src="/images/data/20201029221556.png" alt="image-20201029221556682"></p>
<h2 id="3-分支问题"><a href="#3-分支问题" class="headerlink" title="3.分支问题"></a>3.分支问题</h2><p><strong>gitblit</strong>中没有创建工单（分支）的按钮，但并不代表不支持分支。做法便是将git仓库拉取至本地中，新建分支然后上传至远端仓库即可。</p>
<h3 id="3-1-显示分支列表"><a href="#3-1-显示分支列表" class="headerlink" title="3.1 显示分支列表"></a>3.1 显示分支列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure>

<h3 id="3-2-新建分支"><a href="#3-2-新建分支" class="headerlink" title="3.2 新建分支"></a>3.2 新建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch demo</span><br></pre></td></tr></table></figure>

<h3 id="3-3-切换分支"><a href="#3-3-切换分支" class="headerlink" title="3.3 切换分支"></a>3.3 切换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout demo</span><br></pre></td></tr></table></figure>

<h3 id="3-4-远程分支新建"><a href="#3-4-远程分支新建" class="headerlink" title="3.4 远程分支新建"></a>3.4 远程分支新建</h3><p>&emsp;&emsp;在本地新分支下，推送本地分支至远程仓库中的分支（非强制要求同名），使用以下命令对应即可。其中第一个分支名<code>demo</code>对应的是本地分支名，第二个分支名<code>demo</code>对应的是远程分支名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin demo:demo</span><br></pre></td></tr></table></figure>

<h3 id="3-5-本地仓库分支关联远程分支"><a href="#3-5-本地仓库分支关联远程分支" class="headerlink" title="3.5 本地仓库分支关联远程分支"></a>3.5 本地仓库分支关联远程分支</h3><p>使用该句之前必须确保远程仓库存在该分支，否则报错。关联之后便可直接使用<code>git push</code>或者<code>git pull</code>进行推送或拉取，命令简单明了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/demo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rz和sz命令传输文件</title>
    <url>/2021/01/07/818b6f02a79d/</url>
    <content><![CDATA[<h1 id="新鲜出炉的Centos"><a href="#新鲜出炉的Centos" class="headerlink" title="新鲜出炉的Centos"></a>新鲜出炉的Centos</h1><h2 id="一、配置yum国内镜像源"><a href="#一、配置yum国内镜像源" class="headerlink" title="一、配置yum国内镜像源"></a>一、配置yum国内镜像源</h2><h3 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h3><p>如果要对重要文件进行修改的话，建议做好备份，养成一个好习惯。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>

<p>该文件是Centos的镜像文件配置，一般国内都会配置成阿里云、网易、清华大学。我这里选择的式清华大学的镜像源，编辑 <code>/etc/yum.repos.d/CentOS-Base.repo </code>文件，在 <code>mirrorlist=</code> 开头行前面加 <code>#</code> 注释掉；并将 <code>baseurl=</code> 开头行取消注释（如果被注释的话），把该行内的域名（例如<code>mirror.centos.org</code>）替换为 <code>mirrors.tuna.tsinghua.edu.cn</code>。</p>
<a id="more"></a>

<h3 id="2、Centos镜像源替换"><a href="#2、Centos镜像源替换" class="headerlink" title="2、Centos镜像源替换"></a>2、Centos镜像源替换</h3><p>这里以Centos7的阿里镜像源为例，通过该命令下载保存为本机镜像文件名即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </span><br></pre></td></tr></table></figure>

<p>如果上述命令执行失败，则可能时没有安装<code>wget</code>工具，则使用 <code>yum -y install wget </code>即可安装，再执行上述命令即可。</p>
<h3 id="3、更新软件包缓存"><a href="#3、更新软件包缓存" class="headerlink" title="3、更新软件包缓存"></a>3、更新软件包缓存</h3><p>清楚之前的软件包缓存，然后更新软件包缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="4、更新软件包"><a href="#4、更新软件包" class="headerlink" title="4、更新软件包"></a>4、更新软件包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">https://mirrors.tuna.tsinghua.edu.cn/help/centos/</a></p>
<h2 id="二、rz、sz命令传输文件"><a href="#二、rz、sz命令传输文件" class="headerlink" title="二、rz、sz命令传输文件"></a>二、rz、sz命令传输文件</h2><p>大文件传输的话，建议使用<code>Filezilla</code>进行传输，个别的小文件传输的话，仅以使用<code>lrzsz</code>，更方便哦！！！</p>
<h3 id="1、安装-lrzsz"><a href="#1、安装-lrzsz" class="headerlink" title="1、安装 lrzsz"></a>1、安装 lrzsz</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install lrzsz -y</span><br></pre></td></tr></table></figure>

<h3 id="2、上传文件"><a href="#2、上传文件" class="headerlink" title="2、上传文件"></a>2、上传文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>

<p>rz命令打开文件选择框，选择要发送的文件即可发送至当前目录。</p>
<p>从Windows/Mac直接拖动至XShell窗口也是同样的哦！！！</p>
<p><img src="/images/data/20210103215423.png" alt="image-20210103215423075"></p>
<p><img src="/images/data/20210103214524.png" alt="image-20210103214523798"></p>
<h3 id="3、下载文件"><a href="#3、下载文件" class="headerlink" title="3、下载文件"></a>3、下载文件</h3><p><code>sz 文件名</code>便可下载该文件至本地，选择本地文件夹即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sz /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210103221932.png" alt="image-20210103221932546"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2021/01/07/75eb06482a73/</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><blockquote>
<p>本文主要用于记录，在工作学习中经常需要使用的常见Linux命令。在<a href="https://couragehe.github.io/">CourageHe’s Blog</a>不间断更新，欢迎各位看官指教。</p>
</blockquote>
<a id="more"></a>

<p>Linux资源查看</p>
<p>各分区使用情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210107001504.png" alt="image-20210107001503961"></p>
<p>查看进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210107001625.png" alt="image-20210107001625631"></p>
<p>查看内存使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210107001741.png" alt="image-20210107001741107"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fre -m</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210107001916.png" alt="image-20210107001916338"></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>1、开放端口管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 永久开放某端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3000/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久开放一段端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port==6000-6600/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久关闭某端口</span></span><br><span class="line">firewall-cmd --remove-port=3000/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>2、检查防火墙规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看接口信息</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状态</span></span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<p>3、防火墙操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 防火墙开机自启</span></span><br><span class="line">systemctl enable firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消防火墙自启</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 防火墙运行状态</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<p>4、扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 然后转发 tcp 22 端口至 9527</span></span><br><span class="line">firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=9527</span><br></pre></td></tr></table></figure>



<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><ul>
<li><p>Linux系统对文件的权限有严格的控制，如果想对某个文件执行某种操作，必须具有对应的权限方可执行成功。</p>
</li>
<li><p>读写执行：r、w、x</p>
</li>
<li><p>权限粒度有拥有者、群组、其他组三种。每个文件都可以针对三个力度，设置不同的rwx(读写执行)权限。通常情况下，一个文件只能归属于一个用户和组，如果其他用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属多个组。</p>
</li>
<li><p>通常使用chmod命令对文件的权限进行设置和更改</p>
</li>
</ul>
<p><strong>数字权限使用格式：</strong></p>
<p>r=4，w=2，x=1。其他的权限组合也可以用其他的八进制数字表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">rw &#x3D; 4+2 &#x3D; 6</span><br><span class="line">rx &#x3D; 4+1 &#x3D; 5</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<ul>
<li>所有人可读写执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 filename</span><br></pre></td></tr></table></figure>

<ul>
<li>拥有者可读写，拥有者群组、其他组不可读写执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 filename</span><br></pre></td></tr></table></figure>

<ul>
<li>拥有者可读写，拥有者群组可读，其他组不可读写执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 640 filename</span><br></pre></td></tr></table></figure>

<ul>
<li>对文件夹文件循环授权 <code>-R</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R  640 dirname</span><br></pre></td></tr></table></figure>



<h2 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> s</span></span><br><span class="line">service sshd status</span><br><span class="line"></span><br><span class="line">yum install sshd</span><br><span class="line">yum install openssh-server</span><br><span class="line"></span><br><span class="line">service sshd start</span><br><span class="line">yum remove sshd</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>删除密钥</p>
<p>linux 系统上使用ssh工具远程登录设备时，如果之前保存过该设备的密钥，之后该设备密钥更新，此时需执行以下命令才能后续的ssh正常登录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f  &quot;/root/.ssh/known_hosts&quot; -R 192.168.0.1</span><br><span class="line"></span><br><span class="line"> -f filename     #指定密钥文件名。</span><br><span class="line"> -R hostname   #从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br></pre></td></tr></table></figure>

<h2 id="vim命令快捷键"><a href="#vim命令快捷键" class="headerlink" title="vim命令快捷键"></a>vim命令快捷键</h2><p><strong>基本工作模式</strong></p>
<ul>
<li><strong>命令行模式</strong></li>
</ul>
<p>任何时候，不管用户处于何种模式，只要按一下<strong>ESC</strong>键，即可使Vi进入命令模式；我们在shell环境(提示符为$)下输入启动Vi命令，进入编辑器时，也是处于该模式下。在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。</p>
<ul>
<li><strong>文本输入模式</strong></li>
</ul>
<p>在命令模式下输入插入命令<strong>i</strong>、附加命令<strong>a</strong> 、打开命令<strong>o</strong>、修改命令<strong>c</strong>、取代命令<strong>r</strong>或替换命令<strong>s</strong>都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键<strong>ESC</strong>即可。</p>
<ul>
<li><strong>末行模式</strong></li>
</ul>
<p>末行模式也称ex转义模式。在命令模式下，用户按“**:<strong>”键即可进入末行模式下，此时Vi会在显示窗口的最后一行(通常也是屏幕的最后一行)显示一个“</strong>:**”作为末行模式的提示符，等待用户输入命令。多数文件管理命令都是在此模式下执行的(如把编辑缓冲区的内容写到文件中等)。末行命令执行完后，Vi自动回到命令模式。</p>
<p><strong>进入插入模式:</strong></p>
<p>i: 插入光标前一个字符</p>
<p>I: 插入行首</p>
<p>a: 插入光标后一个字符</p>
<p>A: 插入行未</p>
<p>o: 向下新开一行,插入行首</p>
<p>O: 向上新开一行,插入行首</p>
<p><strong>进入末行模式</strong></p>
<p>在命令模式下，用户按“:”键即可进入末行模式</p>
<p><strong>退出</strong></p>
<p>:q 退出</p>
<p>:q! 退出并不保存</p>
<p>:w 保存</p>
<p>:wq 保存并退出</p>
<p>:x 保存并退出</p>
<p><strong>查找命令:</strong></p>
<p>/: str查找</p>
<p>n: 下一个</p>
<p>N：上一个</p>
<p><strong>替换命令：</strong></p>
<p>把abc全部替换成123</p>
<p>末行模式下，将当前文件中的所有abc替换成123。如果不使用 g，则只会替换每一行的第一个 abc</p>
<p>:%s/abc/123/g</p>
<p>末行模式下，将第一行至第10行之间的abc替换成123</p>
<p>:1, 10s/abc/123/g</p>
<p><strong>vim</strong>里执行 <strong>shell</strong> 下命令:</p>
<p>末行模式里输入!,后面跟命令</p>
<p><strong>进入命令模式:</strong></p>
<p>ESC:从插入模式或末行模式进入命令模式</p>
<p><strong>移动光标:</strong></p>
<p>h: 左移</p>
<p>j: 下移</p>
<p>k: 上移</p>
<p>l: 右移</p>
<p>M: 光标移动到当前屏幕的中间行</p>
<p>L: 光标移动到当前屏幕最后一行行首</p>
<p>gg: 光标移动文件开头</p>
<p>G: 光标移动到文件末尾</p>
<p>G: 移动到指定行,行号G (扩展：打开文件时跳转指定行,vi 文件名 +行数)</p>
<p>w: 向后一次移动一个字</p>
<p>b: 向前一次移动一个字</p>
<p>{: 按段移动,上移</p>
<p>}: 按段移动,下移</p>
<p>Ctr-d: 向下翻半屏</p>
<p>Ctr-u: 向上翻半屏</p>
<p>Ctr-f: 向下翻一屏</p>
<p>Ctr-b: 向上翻一屏</p>
<p><strong>撤销命令:</strong></p>
<p>u: 一步一步撤销</p>
<p>Ctr-r: 反撤销</p>
<p><strong>删除命令:</strong></p>
<p>x: 删除光标后一个字符,相当于 Del</p>
<p>X: 删除光标前一个字符,相当于 Backspace</p>
<p>dd: 删除光标所在行,n dd 删除指定的行数</p>
<p>D: 删除光标后本行所有内容,包含光标所在字符</p>
<p>d0: 删除光标前本行所有内容,不包含光标所在字符</p>
<p>dw: 删除光标开始位置的字,包含光标所在字符</p>
<p><strong>复制粘贴:</strong></p>
<p>yy: 复制当前行,n yy 复制 n 行</p>
<p>p: 在光标所在位置向下新开辟一行,粘贴</p>
<p><strong>替换操作:</strong></p>
<p>r: 替换当前字符</p>
<p>R: 替换当前行光标后的字符</p>
<p><strong>文本行移动:</strong></p>
<p>&gt;&gt;: 文本行右移</p>
<p>&lt;&lt;: 文本行左移</p>
<p><strong>重复命令:</strong></p>
<p>.: 重复上一次操作的命令</p>
<p><strong>可视模式:</strong></p>
<p>v: 按字符移动,选中文本</p>
<p>V: 按行移动,选中文本可视模式可以配合 d, y, &gt;&gt;, &lt;&lt; 实现对文本块的删除,复制,左右移动</p>
<h2 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h2><p><strong>ps aux | grep xxx</strong> <strong>查看系统中所有进程</strong></p>
<p><strong>ps -ef | grep xxx</strong> <strong>可以查看子父进程之间的关系</strong></p>
<p><strong>kill -9 PID</strong> <strong>强制杀死进程</strong></p>
<p><strong>top</strong> <strong>查看所有进程/cpu/内存/负载</strong></p>
<p><strong>netstat -anp |grep</strong> <strong>进程号</strong> <strong>查看该进程网络信息</strong></p>
<p><strong>netstat -nlp | grep</strong> <strong>端口号</strong> <strong>查看网络端口号占用情况</strong></p>
<p>（如netstat：未找到命令，运行<code>yum install net-tools -y</code>命令安装网络工具即可）</p>
<h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2><p><strong>查看当前目录下文件大小</strong></p>
<p>可以将当前目录下所有文件的大小给列出来。按照从大到小的方式排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sh * | sort -nr </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该命令只是当前目录下文件大小排序，并不会显示子目录下具体文件的排序</p>
</blockquote>
<p>查看当前目录下一级子文件和子目录占用的磁盘容量:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -lh --max-depth=1 </span><br></pre></td></tr></table></figure>

<p>改变“–max-depth=1”中的数值大小就可以指定查看该目录下多少级子目录</p>
<p>du参数解释<br>-h或–human-readable 以K，M，G为单位，提高信息的可读性<br>-s或–summarize 仅显示总计，即当前目录的大小。</p>
<p>常用:<br>查询当前目录下所有子目录总大小 并按大小排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sh * | sort -nr </span><br></pre></td></tr></table></figure>

<h2 id="nohup重定向输出"><a href="#nohup重定向输出" class="headerlink" title="nohup重定向输出"></a>nohup重定向输出</h2><p>在服务器上使用nohup命令后台跑程序的时候，如果直接使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup <span class="built_in">command</span></span><br></pre></td></tr></table></figure>

<p>那么文件中输出的内容会默认保存到nohup.out文件里面。如我们想指定输出到某个文件，可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt;myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>这样可以将输出指定到myout.file中去。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>新装虚拟机-网络配置</title>
    <url>/2022/08/10/f459a23fb1fd/</url>
    <content><![CDATA[<h1 id="新装虚拟机-网络配置"><a href="#新装虚拟机-网络配置" class="headerlink" title="新装虚拟机-网络配置"></a>新装虚拟机-网络配置</h1><h2 id="1、vmware网络简介"><a href="#1、vmware网络简介" class="headerlink" title="1、vmware网络简介"></a>1、vmware网络简介</h2><h3 id="1-Host-Only（仅主机模式）"><a href="#1-Host-Only（仅主机模式）" class="headerlink" title="1.Host-Only（仅主机模式）"></a><strong>1.Host-Only（仅主机模式）</strong></h3><p>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示：<a id="more"></a><img src="/images/data/ewqewq.png" alt="ewqewq"></p>
<h3 id="2-Bridged（桥接模式）"><a href="#2-Bridged（桥接模式）" class="headerlink" title="2.Bridged（桥接模式）"></a><strong>2.Bridged（桥接模式）</strong></h3><p>什么是桥接模式？桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示：<img src="/images/data/32232232.png" alt="32232232"></p>
<h3 id="3-NAT（地址转换模式）"><a href="#3-NAT（地址转换模式）" class="headerlink" title="3.NAT（地址转换模式）"></a><strong>3.NAT（地址转换模式）</strong></h3><p>NAT技术应用在internet网关和路由器上，比如192.168.0.123这个地址要访问internet，它的数据包就要通过一个路由器，而路由器拥有一个能访问internet的ip地址，这样的路由器就要在收发数据包时，对数据包的IP协议层数据进行更改（即 NAT），以使私有网段的主机能够顺利访问internet。<br>刚刚我们说到，如果你的网络ip资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助虚拟NAT设备（就是一个路由器）和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示</p>
<p><img src="/images/data/wqweqe12.png" alt="‘wqweqe12’"></p>
<h2 id="2、具体配置"><a href="#2、具体配置" class="headerlink" title="2、具体配置"></a>2、具体配置</h2><p>我们网络选择使用nat模式</p>
<h3 id="1-网络编辑器设置"><a href="#1-网络编辑器设置" class="headerlink" title="1. 网络编辑器设置"></a>1. 网络编辑器设置</h3><p>选择虚拟网络编辑器</p>
<p><img src="/images/data/clip_image002-16600986659924.jpg" alt="img"></p>
<p>选择nat模式，然后点击右下角的更改设置</p>
<p><img src="/images/data/clip_image004-16600986659935.jpg" alt="img"></p>
<p>设置子网IP：192.168.52.0</p>
<p>子网掩码：255.255.255.0</p>
<p><img src="/images/data/clip_image006-16600986659936.jpg" alt="img"></p>
<p>点击NAT设置</p>
<p><img src="/images/data/12313.png" alt="12313"></p>
<p>个人电脑网络设置：找到网络连接中的VMnet8</p>
<p><img src="/images/data/clip_image010.jpg" alt="img"></p>
<p>设置：</p>
<p><img src="/images/data/21.png" alt="21"></p>
<h3 id="2-网卡设置"><a href="#2-网卡设置" class="headerlink" title="2. 网卡设置"></a>2. 网卡设置</h3><p>#<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>进入网卡设置</p>
<p>红色是需要修改和添加的地方，按 i进入编辑模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">PROXY_METHOD&#x3D;none</span><br><span class="line">BROWSER_ONLY&#x3D;no</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6_AUTOCONF&#x3D;yes</span><br><span class="line">IPV6_DEFROUTE&#x3D;yes</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy</span><br><span class="line">NAME&#x3D;ens33</span><br><span class="line">UUID&#x3D;4f81f256-131f-4fdb-9365-1ae4c7882aa2</span><br><span class="line">DEVICE&#x3D;ens33</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">IPADDR&#x3D;192.168.52.100</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.52.1</span><br><span class="line">DNS1&#x3D;8.8.8.8</span><br></pre></td></tr></table></figure>

<p>改完后【ESC】退出，：wq保存设置退出</p>
<p>#重启网卡 <code>service network restart</code></p>
<p><img src="/images/data/clip_image014.jpg" alt="img"></p>
<p>测试网络是否连通外网：<code>ping www.baidu.com</code></p>
<p><img src="/images/data/image-20220810142652206.png" alt="image-20220810142652206"></p>
<p>到此centos7.4安装完成，网络也配置成功</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客安装(一)</title>
    <url>/2020/09/14/ed31eabc1ddf/</url>
    <content><![CDATA[<p>欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 <a href="https://hexo.io/zh-cn/docs/troubleshooting">问题解答</a> 中的解答，或者在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>、<a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。</p>
<h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><table>
<thead>
<tr>
<th align="center">软件/工具</th>
<th align="center">版本说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Node</td>
<td align="center">不低于10.13</td>
</tr>
<tr>
<td align="center">Git</td>
<td align="center">无要求</td>
</tr>
</tbody></table>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init hexo-demo</span><br><span class="line">$ <span class="built_in">cd</span> hexo-demo</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h3><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<h3 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>
<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a><code>generate</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a><code>publish</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a><code>server</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><code>deploy</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h3 id="render"><a href="#render" class="headerlink" title="render"></a><code>render</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a><code>migrate</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a><code>clean</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a><code>list</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a><code>version</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<p>参考：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加分类、标签、关于页(二)</title>
    <url>/2020/09/14/993996b2e602/</url>
    <content><![CDATA[<blockquote>
<p>生成的新文件夹都在source下也就是和放文章的文件夹一块 以下所有命令都是在博客文件目录下执行</p>
</blockquote>
<h2 id="创建“分类”选项"><a href="#创建“分类”选项" class="headerlink" title="创建“分类”选项"></a>创建“分类”选项</h2><p>生成“分类”页并添加tpye属性,进入博客目录。执行下方命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-22 14:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>添加type: “categories”到内容中，添加后是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-09-14 01:14:43</span><br><span class="line">type: categories</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
<p>给文章添加“categories”属性</p>
<p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-09-14 01:14:43</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>
<h2 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h2><p>生成“标签”页并添加tpye属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-09-14 01:16:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加type: “tags”到内容中，添加后是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-09-14 01:16:40</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
<p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客安装</span><br><span class="line">date: 2020-09-14 00:58:33</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="创建“关于”选项"><a href="#创建“关于”选项" class="headerlink" title="创建“关于”选项"></a>创建“关于”选项</h2><p>生成“关于”页并添加tpye属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>

<p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-09-14 01:31:57</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加type: “tags”到内容中，添加后是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于我</span><br><span class="line">date: 2020-09-14 01:31:57</span><br><span class="line">type: about</span><br><span class="line">---</span><br><span class="line"><span class="section">## 个人简介</span></span><br><span class="line">……</span><br><span class="line"><span class="section">## 其他</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
<p>点击首页的“关于”可以看到该文件所书写的内容。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/14/a07b879cfc08/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装及常用命令</title>
    <url>/2020/10/15/4a9e23212be1/</url>
    <content><![CDATA[<h1 id="Nginx安装及常用命令"><a href="#Nginx安装及常用命令" class="headerlink" title="Nginx安装及常用命令"></a>Nginx安装及常用命令</h1><blockquote>
<p>Nginx(“engine x”)是一款由俄罗斯的程序设计师<code>Igor Sysoev</code>所开发高性能的<strong>Web</strong>和<strong>反向代理</strong>服务器，也是一个<strong>IMAP/POP3/SMTP</strong>代理服务器，在高连接并发的情况下，Nginx是Apache服务器不错的替代品</p>
</blockquote>
<p>系统平台：CentOS release 6.6-7.8（64位）</p>
<a id="more"></a>

<h2 id="一、安装编译工具及库文件"><a href="#一、安装编译工具及库文件" class="headerlink" title="一、安装编译工具及库文件"></a>一、安装编译工具及库文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>gcc</strong>：</li>
<li><strong>pcre-devel</strong>：PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。</li>
<li><strong>zlib-devel</strong>：zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</li>
<li><strong>openssl、openssl-devel</strong>：OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</li>
</ul>
<h2 id="二、安装Nginx"><a href="#二、安装Nginx" class="headerlink" title="二、安装Nginx"></a>二、安装Nginx</h2><h3 id="1-下载Nginx安装包"><a href="#1-下载Nginx安装包" class="headerlink" title="1.下载Nginx安装包"></a>1.下载Nginx安装包</h3><p>下载地址：<a href="http://nginx.org/download/nginx-1.6.2.tar.gz">http://nginx.org/download/nginx-1.6.2.tar.gz</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /data/portal/nginx</span><br><span class="line">[root@localhost nginx]# wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# tar -zxvf nginx-1.18.0.tar.gz </span><br></pre></td></tr></table></figure>

<h3 id="3-进入安装目录"><a href="#3-进入安装目录" class="headerlink" title="3.进入安装目录"></a>3.进入安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.6.2]# cd nginx-1.6.2/</span><br></pre></td></tr></table></figure>

<h3 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h3><ul>
<li><h3 id="prefix：指点安装目录"><a href="#prefix：指点安装目录" class="headerlink" title="--prefix：指点安装目录"></a><code>--prefix</code>：指点安装目录</h3></li>
<li><p><code>--with</code>：指定安装模块</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost pcre-8.35]# ./configure  --prefix=/usr/local/nginx --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module </span><br><span class="line">[root@localhost pcre-8.35]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="5-查看Nginx版本"><a href="#5-查看Nginx版本" class="headerlink" title="5.查看Nginx版本"></a>5.查看Nginx版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/ -v</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20200821234746.png" alt="image-20200821234746176"></p>
<h2 id="三、Nginx配置"><a href="#三、Nginx配置" class="headerlink" title="三、Nginx配置"></a>三、Nginx配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /usr/local/nginx/conf/</span><br><span class="line">[root@localhost conf]# vim nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="1-Nginx的默认配置文件"><a href="#1-Nginx的默认配置文件" class="headerlink" title="1.Nginx的默认配置文件"></a>1.Nginx的默认配置文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Nginx配置文件结构"><a href="#2-Nginx配置文件结构" class="headerlink" title="2.Nginx配置文件结构"></a>2.Nginx配置文件结构</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">..              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>
<li><strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li><strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>
<li><strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>
<li><strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
<h3 id="3-Nginx配置文件模板"><a href="#3-Nginx配置文件模板" class="headerlink" title="3.Nginx配置文件模板"></a>3.Nginx配置文件模板</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是nginx的基本配置，需要注意的有以下几点：</p>
<h4 id="1-几个常见配置项"><a href="#1-几个常见配置项" class="headerlink" title="1. 几个常见配置项"></a>1. 几个常见配置项</h4><ul>
<li><code>$remote_addr</code> 与 <code>$http_x_forwarded_for</code> 用以记录客户端的ip地址；</li>
<li><code>$remote_user</code> ：用来记录客户端用户名称；</li>
<li><code>$time_local</code> ： 用来记录访问时间与时区；</li>
<li><code>$request </code>： 用来记录请求的url与http协议；</li>
<li><code>$status</code> ： 用来记录请求状态；成功是200；</li>
<li><code>$body_bytes_s ent</code> ：记录发送给客户端文件主体内容大小；</li>
<li><code>$http_referer </code>：用来记录从那个页面链接访问过来的；</li>
<li><code>$http_user_agent</code> ：记录客户端浏览器的相关信息；</li>
</ul>
<h4 id="2-惊群现象"><a href="#2-惊群现象" class="headerlink" title="2. 惊群现象"></a>2. 惊群现象</h4><p>一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p>
<h4 id="3-指令必须分号结束"><a href="#3-指令必须分号结束" class="headerlink" title="3. 指令必须分号结束"></a>3. 指令必须分号结束</h4><h3 id="4-检查Nginx配置文件"><a href="#4-检查Nginx配置文件" class="headerlink" title="4.检查Nginx配置文件"></a>4.检查Nginx配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20200822182926.png" alt="image-20200822182926429"></p>
<h2 id="四、Nginx常用命令"><a href="#四、Nginx常用命令" class="headerlink" title="四、Nginx常用命令"></a>四、Nginx常用命令</h2><h3 id="1-启动Nginx"><a href="#1-启动Nginx" class="headerlink" title="1. 启动Nginx"></a>1. 启动Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<h3 id="2-重新载入配置文件"><a href="#2-重新载入配置文件" class="headerlink" title="2.重新载入配置文件"></a>2.重新载入配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="3-重启-Nginx"><a href="#3-重启-Nginx" class="headerlink" title="3.重启 Nginx"></a>3.重启 Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -s reopen </span><br></pre></td></tr></table></figure>

<h3 id="4-停止-Nginx"><a href="#4-停止-Nginx" class="headerlink" title="4.停止 Nginx"></a>4.停止 Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -s stop  </span><br></pre></td></tr></table></figure>





<p>参考：<a href="https://www.runoob.com/linux/nginx-install-setup.html">https://www.runoob.com/linux/nginx-install-setup.html</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx添加模块</title>
    <url>/2020/10/18/7a13413b21cc/</url>
    <content><![CDATA[<h1 id="Nginx添加模块"><a href="#Nginx添加模块" class="headerlink" title="Nginx添加模块"></a>Nginx添加模块</h1><p>&emsp;&emsp;编译安装Nginx的时候，有些模块默认不会安装，比如<code>http_ssl_module</code>。那么为了让Nginx支持HTTPS，必须添加这个模块。下面讲解如何在已经安装过后在此添加新的模块。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>支持功能</th>
<th>所需模块</th>
</tr>
</thead>
<tbody><tr>
<td>https</td>
<td>http_ssl_module</td>
</tr>
<tr>
<td>fastdfs</td>
<td>ngx_fastdfs_module</td>
</tr>
<tr>
<td>gzip</td>
<td><strong>http_gzip_static_module</strong></td>
</tr>
<tr>
<td>监控</td>
<td>http_stub_status_module</td>
</tr>
</tbody></table>
<h2 id="1-进入Nginx源码根目录"><a href="#1-进入Nginx源码根目录" class="headerlink" title="1. 进入Nginx源码根目录"></a>1. 进入Nginx源码根目录</h2><p>即最初的安装包目录，如果没有的话，下载新的源码并解压即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /data/portal/nginx</span><br></pre></td></tr></table></figure>

<h2 id="2-查看nginx版本及其编译参数"><a href="#2-查看nginx版本及其编译参数" class="headerlink" title="2. 查看nginx版本及其编译参数"></a>2. 查看nginx版本及其编译参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>

<h2 id="3-重新编译代码和模块"><a href="#3-重新编译代码和模块" class="headerlink" title="3. 重新编译代码和模块"></a>3. 重新编译代码和模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# ./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure>

<h2 id="4-执行make"><a href="#4-执行make" class="headerlink" title="4. 执行make"></a>4. 执行make</h2><p>（注意：千万别 make install ，否则就覆盖安装了）， make完之后在<code>/data/portal/nginx/nginx-1.6.2/objs/</code>目录下就多了个nginx，这个就是新版本的程序了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# make</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20200823120359.png" alt="image-20200823120359688"></p>
<h2 id="5-备份旧的nginx程序"><a href="#5-备份旧的nginx程序" class="headerlink" title="5. 备份旧的nginx程序"></a>5. 备份旧的nginx程序</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /usr/local/nginx/sbin</span><br><span class="line">[root@localhost sbin]#mv nginx nginx_bak</span><br></pre></td></tr></table></figure>

<h2 id="6-把新的nginx程序复制至-usr-local-nginx-sbin"><a href="#6-把新的nginx程序复制至-usr-local-nginx-sbin" class="headerlink" title="6. 把新的nginx程序复制至/usr/local/nginx/sbin"></a>6. 把新的nginx程序复制至<code>/usr/local/nginx/sbin</code></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cp /data/portal/nginx/nginx-1.6.2/objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure>

<h2 id="7-检测程序是否正确"><a href="#7-检测程序是否正确" class="headerlink" title="7. 检测程序是否正确"></a>7. 检测程序是否正确</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20200823121719.png" alt="image-20200822182926429"></p>
<h2 id="8-平滑启动服务"><a href="#8-平滑启动服务" class="headerlink" title="8. 平滑启动服务"></a>8. 平滑启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="9-查看模块是否安装"><a href="#9-查看模块是否安装" class="headerlink" title="9. 查看模块是否安装"></a>9. 查看模块是否安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20200824001843.png" alt="image-20200824001842900"></p>
<h2 id="10-重启nginx"><a href="#10-重启nginx" class="headerlink" title="10. 重启nginx"></a>10. 重启nginx</h2><p>Nginx重新安装模块后，必须先退出，然后再次启动，该模块才会生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>驾照考试-刷题总结</title>
    <url>/2021/03/04/e831abc0a85c/</url>
    <content><![CDATA[<h1 id="驾照考试-刷题总结"><a href="#驾照考试-刷题总结" class="headerlink" title="驾照考试-刷题总结"></a>驾照考试-刷题总结</h1><blockquote>
<p>本文主要用于记录，在准备驾照考试中总结的日常经验。在<a href="https://couragehe.github.io/">CourageHe’s Blog</a>不间断更新，欢迎各位看官指教。</p>
</blockquote>
<a id="more"></a>

<h2 id="2021-03-04"><a href="#2021-03-04" class="headerlink" title="2021-03-04"></a>2021-03-04</h2><p>右让左，左让直，转弯让直行。</p>
<p>在高速公路匝道上提速到每小时60公里以上时，应先打开左转向灯，在不妨碍其他车辆的情况下驶入车道。</p>
<p>违反道路交通安全法律法规都属于违法行为</p>
<p>车辆发生故障无法移动时，警告标志应放置于车辆后的150M以外</p>
<p>70周岁以上的机动车驾驶人，应每年进行一次身体检查，并向有关部门申报身体情况</p>
<p>防抱死制动系统故障</p>
<p><img src="/images/data/20210304210635.png" alt="image-20210304210635318"></p>
<p>车辆在泥泞道路发生侧滑时，正确做法是车尾向哪一侧移动，即向哪一侧适当调整方向盘。</p>
<p>此标志是左侧通行，^表示两侧通行，/这个表示左侧通行，\这个表示右侧通行。</p>
<p>简记：上左下右</p>
<p><img src="/images/data/20210304211839.png" alt="image-20210304211839461"></p>
<p>禁止车辆长时间停放，临时停放不受限制。中间一个红叉是禁止停车，中间一个斜杠是禁止长时间停车。</p>
<p><img src="/images/data/20210304212057.png" alt="image-20210304212057360"></p>
<p>交警手势速记口诀：<a href="https://www.bilibili.com/video/BV1eV411m7CM/">https://www.bilibili.com/video/BV1eV411m7CM/</a></p>
<p>左高右放要叫停，左右折叠是直行。</p>
<p>左手在下左转弯，右手在下右转弯。</p>
<p>左手下摆即待转，右手平摆要变道。</p>
<p>右手放下要减速，左手抬起靠边停。</p>
<h2 id="2021-03-05"><a href="#2021-03-05" class="headerlink" title="2021-03-05"></a>2021-03-05</h2><p>雾灯绿左黄右，绿左黄右。</p>
<p>绿光在左是前雾灯，黄光在右是后雾灯。</p>
<p><strong>二条车道</strong>： 左:100<del>120 右:60</del>100</p>
<p>三条车道：  最左：110-120  中间：90-110 最右：60-90</p>
<p>四条车道：最左:110<del>120 中间二条:90</del>110 最右:60~80</p>
<p>进入高速加速车道,尽快提到(60公里)以上</p>
<p>假一吊二撤三醉五逃终生</p>
<p>边缘线为实线，禁止跨越实线行驶；边缘线为虚线，可临时跨越行驶。</p>
<p>无中心线，城3公4；有中心线，城5公7；</p>
<p>科目一技巧：<a href="https://zhuanlan.zhihu.com/p/37515599">https://zhuanlan.zhihu.com/p/37515599</a></p>
<p>致人重伤、死亡的：3年以下<br>使公私财产遭受重大损失的：3年以下<br>致人死亡且逃逸的：3年以上7年以下<br>因逃逸导致他人死亡的：7年以上</p>
<p>关于时间：</p>
<p>道路交通安全违法行为累计记分一个周期满分为12个月<br>驾驶证期满90天申请换证，<br>驾驶证记载信息发生变化30天内申请换证。<br>驾驶人因出国等原因无法办理审验时，延长期限不得超过3年<br>申领小型汽车驾驶证的人年龄条件18周岁以上70周岁以下<br>60周岁驾驶人每1年需提交一次身体体检证明</p>
<p>驾驶人户籍迁出原车辆管理所需要向迁入地车辆管理所提出申请<br>驾驶人在驾驶证核发地车辆管理所管辖区以外居住的，可以向居住地车辆管理申请换证</p>
<p>夜间在道路会车，距离对向来车150以外将远光灯改为近光灯。</p>
<p>那些情况不得停车；在站点如公交站，消防站30米以内，在易发事故的路段，如交叉路口，转弯路、窄路隧道50米以内</p>
<p>扣分的行为：</p>
<p>凡是有涉及酒的（酒驾）、号牌的（故意遮挡、污损、不安装号牌的，使用伪造、变造号牌或者使用其他号牌的），逃逸的，<strong>与准驾车型不符的</strong>，车速超过规定时速50%的，高速公路的（高速公路倒车、逆行、穿越中央隔离带掉头）一律扣12分。</p>
<p>六分：</p>
<p>1、违法占用应急车道行驶</p>
<p>2、违反交通信号灯通行、</p>
<p>3、不按规定避让校车 </p>
<p>4、驾驶证被扣期间驾驶机动车</p>
<p>扣3分：不按规定年检、道路上发生故障不按规定使用灯光和警告标志与禁令标志、禁止标线等行为、逆行 、禁停路停车，<strong>高速上</strong>超过规定时速10%-20%</p>
<p>任何时候空挡滑行都错。</p>
<p>交警可扣留驾驶证：<br>饮酒后驾驶机动车的<br>将机动车交给驾驶证被吊销的人驾驶的<br>一个记分周期内累计记分达12分的</p>
<p>扇形的是前车窗，长方形的是后车窗</p>
<p>灯光标志：向左照的是前灯，向右照的是后灯</p>
<p>两个同心红三角是危险报警闪烁灯是停车时人为开启的</p>
<p>道路养护车、工程作业车在进行作业时，不受交通标志、标线限制</p>
<p>洒水车、清扫车等在进行作业时，不受车辆分道行驶限制</p>
<p>扣证后开车，拘留十五天，罚款200-2000</p>
<p>1212高速公路救援电话</p>
<p>实习期上高速，要有三年以上驾龄的驾驶人陪同</p>
<p>未悬挂机动车号牌、检验合格标志、保险标志、行驶证、驾驶证的，相关部门应扣留机动车</p>
<h2 id="2021-03-07"><a href="#2021-03-07" class="headerlink" title="2021-03-07"></a>2021-03-07</h2><p>“两弯反向，三弯连续”，拐两个弯的都是反向弯路，拐三个弯的是连续弯路。</p>
<p>261：能见度低于200米，车速不得超过每小时60公里，车距100米。</p>
<p>145，能见度低于100米，车速不得超过每小时40公里，车距50米。</p>
<p>高速公路上：</p>
<p>车速超过每小时100公里时，与同车道前车保持100米以上的距离。</p>
<p>车速低于每小时100公里时，与同车道前车保持最小距离不得少于50米。</p>
<p>伪造变造XX证，十五日拘留并罚款2000-5000</p>
<p>非法安装报警器、标志等，予以收缴，并处200-2000罚款</p>
<p>机动车抵押时，要向<strong>登记地</strong>车管所申请。</p>
<p>以下情形注销机动车驾驶证：</p>
<p>1、死亡</p>
<p>2、身体条件不适合</p>
<p>3、提出注销申请</p>
<p>4、丧事行为能力，监护人申请</p>
<p>5、超过机动车驾驶证有效期一年以上未换证</p>
<p>机动车强制险的保险期为一年</p>
<p>罚款：</p>
<p>伪造变造证书：2000-5000</p>
<p>醉酒：1000-2000</p>
<p>牛表示牲畜、鹿表示野生动物</p>
<p>一个凸起，中间是实心代表高突，中间有洞代表驼峰桥。</p>
<p>指示图标：</p>
<p>分向行驶：虚线隔开，没有距离和文字提示</p>
<p>分道信息：没有线，单个图形，有距离和文字</p>
<p>交叉路口：实线隔开，有文字和距离</p>
<p>中间有虚线就是紧停车带，没有虚线的是错车道。</p>
<p><img src="/images/data/20210307165335.jpg" alt="images"></p>
<p>线形诱导标志：</p>
<p>一般道路为蓝底白图案，高速公路为绿底白图案，警告性线形诱导标志为红底白图案。</p>
<p><img src="/images/data/20210307165821.jpg" alt="c172ef5c4f5bb097c5aa67e1c7fea81b"></p>
<p>菱形标志：前方有人行横道，车辆应减速慢行或停车等待。</p>
<p><img src="/images/data/20210307170830.jpg" alt="images"></p>
<p>速度限制标志：黄色数字是最高限速，白色数字是最低限速。</p>
<p>路边的黄色虚线禁止长时间停车，实现禁止停车。</p>
<p>停车位：白色收费、黄色为专属停车位、蓝色为免费停车位</p>
<p>通过没有路灯或路灯照明不良的路段时可开启远光灯，但是前方有车或行人时，应关闭远光灯开启近光灯。</p>
<p>轮胎气不足，会造成轮胎与地面的摩擦范围增大，使温度升高，从而爆胎。压力过低和过高都会导致爆胎。</p>
<p>没带各种证件与没证差不多，扣车加罚款</p>
<p>安全头枕需要对准后脑勺来保护驾驶员</p>
<p>关于饮酒醉酒：</p>
<p>饮酒驾驶机动车：罚款1000-2000元，记12分并暂扣驾照6个月；</p>
<p>醉酒驾驶机动车：吊销驾照，五年内不得重新获取驾照。</p>
<p>饮酒驾驶营运机动车，罚款5000元，记12分，处以15日以下拘留，吊销驾照，并且5年内不得重新获取驾照。</p>
<p>醉酒驾驶营运机动车，吊销驾照，10年内不得重新获取驾照，终生不得驾驶运营车辆。</p>
<h2 id="2021-03-09"><a href="#2021-03-09" class="headerlink" title="2021-03-09"></a>2021-03-09</h2><p>初次申领驾照的实习期为12个月</p>
<p>总结处200-2000元罚款，并处吊销驾驶证的情况：</p>
<p>1、超速20%</p>
<p>2、醉酒行驶</p>
<p>3、将车交给驾驶证被吊销人员</p>
<p>为承认做心肺复苏时，胸外按压频率时100-120次/分</p>
<p>转向灯 ==&gt;上右下左</p>
<h2 id="2021-03-10"><a href="#2021-03-10" class="headerlink" title="2021-03-10"></a>2021-03-10</h2><p>扣两分：</p>
<p>驾驶机动车打电话</p>
<p>高速公路与城市快速路上，为使用安全带，罚款50元，扣2分，其他道路罚款50元</p>
<p>驾驶证相关的都去核发地，行驶证相关的都去登记地。</p>
<h2 id="2021-03-12"><a href="#2021-03-12" class="headerlink" title="2021-03-12"></a>2021-03-12</h2><p>&emsp;&emsp;科一考试，93分通过测试。一个人去参加考试，遇到一个小插曲，原来手机要提前放在储物柜，因此都走在考场门口了不得不重新排队。加油啦！后面还有科二、科三、科四，好好准备，沉着应考，认真对待每一次的考核与考验！</p>
]]></content>
      <categories>
        <category>学海无涯</category>
      </categories>
  </entry>
  <entry>
    <title>辛丑牛年新年展望（2021）</title>
    <url>/2021/02/12/6ea85d902251/</url>
    <content><![CDATA[<h1 id="辛丑牛年新年展望（2021）"><a href="#辛丑牛年新年展望（2021）" class="headerlink" title="辛丑牛年新年展望（2021）"></a>辛丑牛年新年展望（2021）</h1><p>&emsp;&emsp;2021年2月12日为辛丑牛年正月初一，就农历而言，今天便就是中国的农历新年。作为一个对传统佳节有浓厚感情的传统国人，辞旧迎新、展望未来便是本文的初衷。2020元旦总结虽有稍许记录，却未整理成文，今天借这个机会发表啦！</p>
<a id="more"></a>

<h2 id="2020年度总结"><a href="#2020年度总结" class="headerlink" title="2020年度总结"></a>2020年度总结</h2><p>&emsp;&emsp;兜兜转转，大学本科已经步入最后一个年头了。这一年，正经世界百年未有之大变局，时代选择我们来见证，也是由我们来建设这个时代。本文便来讲讲我这一年的见证与建设，首先就开门见山说说2020 的个人生涯关键词：<strong>迷茫</strong>、<strong>焦虑</strong>、<strong>尝试</strong>、<strong>奋斗</strong>。</p>
<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul>
<li><strong>迷茫</strong></li>
</ul>
<p>&emsp;&emsp;为什么说是迷茫呢？因为疫情前期一直待在家中，本人对未来考研<strong>OR</strong>工作还未明确目标。目标未定，规划更无须再论。那段时间每天就是看看疫情的最新消息，在Telegram上的疫情信息频道一直关注。可能是没见过大世面的原因吧，一有最新消息推送就想深入了解，造成时间都这样白白蹉跎。</p>
<ul>
<li><strong>焦虑</strong></li>
</ul>
<p>&emsp;&emsp;每个找工作的娃的焦虑，想必每个人都或多或少有过经历！希望早日结束这个状态，现在终于明白铁饭碗为什么这么香了！</p>
<ul>
<li><strong>尝试</strong></li>
</ul>
<p>&emsp;&emsp;应届生的身份，敞开了许多大门，事业单位、公务员、研究生、企业等都可以去尝试，去争取。在2020这一年，我一直都在不断尝试，海投简历、面试IT公司、尝试事业单位和备考研究生等等……</p>
<ul>
<li><strong>奋斗</strong></li>
</ul>
<p>&emsp;&emsp;机会虽然很多，但只有那些有准备的人才能抓住。这一年也是在不断奋斗的一年，同疫情做斗争、刷题背八股文、上海得帆实习、考研备考等。</p>
<h3 id="月历表"><a href="#月历表" class="headerlink" title="月历表"></a>月历表</h3><ul>
<li><strong>1月</strong>：大学本科生涯最后的课程正规考试，回家！！！</li>
</ul>
<p>&emsp;&emsp;大三上学期的期末考试在一月进行，《数据库原理及应用》，《计算机组成与系统结构》等科目进行闭卷考试，因为疫情在家上网课的原因，这便是最后一次正规的课程结课考试了。1月11号放寒假回家，归家途中经过疫情还未报道的武汉，回家不久就安排在家居家隔离，每天都有村里干部来测体温。</p>
<ul>
<li><strong>2月</strong>：疫情造成的蝴蝶效应！</li>
</ul>
<p>&emsp;&emsp;2月的头号大事便是春节啦！记忆之初，春节都是热热闹闹的，百年未有之大变局中的春节只能是远程拜年啦！隔离的春节，爱心却两不相隔，一方有难，八方来援这句话在湖北得到广泛运用。一省帮一市、村里送菜送粮、邻里互帮互助等等奉献爱心的行为都让我深受感动。相比之下，国外的某些XXX恶言恶语、不怀好意的反响就显得太过无耻卑鄙，进一步加深了我对ZF的认同并坚定自身立场。</p>
<ul>
<li><strong>3月</strong>：疫情期间在家赋闲，陷入焦虑</li>
</ul>
<p>&emsp;&emsp;这段时间每天就是看看疫情的最新消息，在Telegram上的疫情信息频道一直关注。可能是没见过大世面的原因吧，一有最新消息推送就想深入了解，造成时间都这样白白蹉跎。</p>
<p>疫情实时播报频道：<a href="https://t.me/nCoV2019">https://t.me/nCoV2019</a></p>
<ul>
<li><strong>4月</strong>：第一次接单干活，实现技术变现</li>
</ul>
<p>&emsp;&emsp;这段期间在家里上网课，课余时间便想找些事情做一下。机缘巧合之下加了一个做私活的群，其中接了一个安卓app的项目，主要任务是写一个类似星巴克咖啡店的APP。另外是一个Web端图书管理系统，前后端交互的形式，由于时间不太够前端草草写了一下。小项目没赚几个钱，但这是首次使用技术变现，值得纪念一下。不得不说，写的界面真丑！哈哈哈</p>
<p><img src="/images/data/20210213010621.png" alt="image-20210213010621705"></p>
<ul>
<li><strong>5月</strong>：面试、准备面试相交织</li>
</ul>
<p>&emsp;&emsp;这是一个面试月，投的基本都是各大公司的实习岗位，有上海得帆、字节跳动、华讯网络等。有喜有忧，大公司基本都被拒了，也是自身准备不足的结果，特别是字节跳动的笔试特别考核算法，所以还需历练！所幸还是有所斩获，收获了上海得帆的实习offer。</p>
<p><img src="/images/data/20210213011312.png" alt="image-20210213011312539"></p>
<ul>
<li><strong>6月</strong>：石油项目</li>
</ul>
<p>&emsp;&emsp;第一次接触实际项目,学校老师招人干的一个分父子模块的后台管理项目。这是一个从需求到项目成型的实际项目，我主要参与前期的数据库建表、项目搭建。</p>
<ul>
<li><strong>7月</strong>：得帆公司培训</li>
</ul>
<p>&emsp;&emsp;7月21日上海得帆实习，第一次独自走向远方，第一次参与这种IT规范培训。在这期间结识了不少优秀的同仁，见贤思齐焉！加油！</p>
<ul>
<li><strong>8-9月</strong>：上海实习</li>
</ul>
<p>&emsp;&emsp;上海得帆公司外派我前往中骏地产参与了ESB项目的开发，新力地产的门户项目。</p>
<ul>
<li><strong>10-11月</strong>：回校工作，成为公司第一个员工</li>
</ul>
<p>&emsp;&emsp;学校老师创建的一个初创公司，领头的一个老师是我大三参赛的一个项目的指导老师，老师认为我能力还行，便邀请我加入公司。当时我正在上海实习，待了大概两个多月也想换个新环境多多历练。话说初创公司确实很锻炼人啊，就你一个人，啥事都是你。刚开始去的那段时间都没开始写代码，都是搞什么流程讨论，原型设计等。这个决定也深深影响到我找工作的进程，一是留校读研边工作，二是出去工作。利弊难论，马上要到选择的时刻了！</p>
<ul>
<li><strong>12月</strong>：临阵考研，加油！！！冲！冲！冲！</li>
</ul>
<p>&emsp;&emsp;2020年12月26日考研，这一月脱产备考，无论是否要读都尽力一试。</p>
<h3 id="年度总结"><a href="#年度总结" class="headerlink" title="年度总结"></a>年度总结</h3><p>&emsp;&emsp;2020许多第一次，第一次接私活，第一次做实际项目，第一次实习，第一次考研。许多第一次做得或许不够好，因此更需努力充实自己。2020，有收获，也有遗憾。这是变化最大的一年，从学校学子到接触社会工作，试错的机会更少，所作的每一个决定都影响着未来数年的路。总的来说，2020让我深刻认识到了自己的不足，见贤思齐焉！！！只思是不够的，更要付诸行动。成功的背后，都是不断的坚持与努力，优秀都是经过一次次碰壁调整出来的。不知从何时起难以专注学习/工作，自制力一直都在减弱，这种状态实在难堪。新的一年希望能够扭转这些疲敝之态，多多历练，想到就去做，一万年太久！只争朝夕！</p>
<h3 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h3><ul>
<li>一天至少一道算法题</li>
</ul>
<p>&emsp;&emsp;<a href="https://github.com/CourageHe/Algorithm-Daily-Practice">算法日常练习代码库</a></p>
<ul>
<li>勤写博客总结经验</li>
<li>海投岗位，找工作</li>
<li>看几本书（剑指Offer、JAVA8函数式编程、设计模式）</li>
</ul>
]]></content>
      <categories>
        <category>个人有感</category>
      </categories>
  </entry>
  <entry>
    <title>FRP内网穿透</title>
    <url>/2021/01/17/dd7e0bbf808e/</url>
    <content><![CDATA[<h1 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h1><blockquote>
<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p>
</blockquote>
<h2 id="使用缘由"><a href="#使用缘由" class="headerlink" title="使用缘由"></a>使用缘由</h2><p>因为疫情的原因，公司提前休假，在家办公。公司的测试环境还有私服GIT都是在内网下，出于安全考虑，不考虑将GIT仓库移至GITHUB、GITEE等平台。首先想到的解决方案是使用类似花生壳这种内网穿透的服务，但是考虑到服务的收费标准与本司的使用需求相差较大。公司有六、七个端口需要转发，使用期限为一个月左右，而花生壳的套餐是按年付费，且线路数有限制，增加线路另外收费。然后想到了本人在大二时候使用的一个开源的内网穿透的代理应用，比较符合公司的解决方案。</p>
<a id="more"></a>

<h2 id="设备环境"><a href="#设备环境" class="headerlink" title="设备环境"></a>设备环境</h2><ul>
<li><p>一台具有公网ip的服务器</p>
</li>
<li><p>N台内网服务器（需要内网穿透的服务器）</p>
</li>
</ul>
<h2 id="系统选型"><a href="#系统选型" class="headerlink" title="系统选型"></a>系统选型</h2><p><img src="/images/data/20210117180715.png" alt="image-20210117180715013"></p>
<table>
<thead>
<tr>
<th>frp支持的</th>
<th>Linux系统架构</th>
</tr>
</thead>
<tbody><tr>
<td>386</td>
<td>X86架构</td>
</tr>
<tr>
<td>amd64</td>
<td>amd架构</td>
</tr>
<tr>
<td>arm</td>
<td>arm架构</td>
</tr>
<tr>
<td>arm64</td>
<td>64位arm架构</td>
</tr>
<tr>
<td>mips</td>
<td>mips架构</td>
</tr>
<tr>
<td>mips64</td>
<td>64位mips架构</td>
</tr>
<tr>
<td>mipsle</td>
<td>mipsle架构</td>
</tr>
<tr>
<td>mips64le</td>
<td>64位mipsle架构</td>
</tr>
</tbody></table>
<p><a href="https://blog.csdn.net/lixuande19871015/article/details/90485929">查看Linux的系统架构</a></p>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>本人搭建的服务端为Centos7.X，系统架构为X86加否；客户端为Windows10，系统架构为amd64。下载解压即可，根据实际需要配置文件即可。下面给一个常用的配置模板，仅供参考。</p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set dashboard_addr and dashboard_port to view dashboard of frps</span></span><br><span class="line"><span class="comment"># dashboard_addr&#x27;s default value is same with bind_addr</span></span><br><span class="line"><span class="comment"># dashboard is available only if dashboard_port is set</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dashboard user and passwd for basic auth protect, if not set, both default value is admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br></pre></td></tr></table></figure>

<p><code>XX.XX.XX.XX:7500</code>为FRP的监控平台网页，账号密码为<code>admin/admin</code>.<img src="https://gitee.com/Courage-He/PicBed/raw/master/data/20210117191329.png" alt="image-20210117191328912"></p>
<p><code>bind_port</code> ：为FRP 服务器用户接收客户端连接的端口：</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>这种方式启动的话，将会把日志打印至<code>frp.log</code>下，用户退出该进程任然存在。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &gt;frp.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找端口为7000的进程</span></span><br><span class="line">netstat -nlp | grep 7000</span><br><span class="line"><span class="comment">#杀死 pid为10263的进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 10263</span><br></pre></td></tr></table></figure>



<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = XX.XX.XX.XX</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">@Windows 远程桌面</span><br><span class="line"><span class="section">[Test Windows Server Connection]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Liunx ssh</span></span><br><span class="line"><span class="section">[Test Linux Server Connection ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6002</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mysql数据库</span></span><br><span class="line"><span class="section">[Test MySQL Sever jdbc]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6003</span></span><br></pre></td></tr></table></figure>

<p><code>server_addr</code>：服务器地址</p>
<p><code>server_port</code>：服务器端口</p>
<p><code>local_ip</code>：本地需要暴露到公网的服务地址。客户端网络环境下的ip地址皆可。</p>
<p><code>local_port</code>：本地需要暴露到公网的服务端口</p>
<p><code>remote_port</code>：在 frp 服务端监听的端口，访问此端口的流量将会被转发到本地服务对应的端口。</p>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frpc.exe -c frpc.ini </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok常用注解</title>
    <url>/2020/08/16/c2f37b230581/</url>
    <content><![CDATA[<h1 id="Lombok常用注解"><a href="#Lombok常用注解" class="headerlink" title="Lombok常用注解"></a>Lombok常用注解</h1><blockquote>
<p>Lombok通过注解的方式省掉大量代码的编写，尤其对于POJO类的set()、get()、toString()等。在源代码只需要加上相应的注解，编译过程中Lombok插件就会自行生辰相关代码。减少冗杂且重复的代码，简化开发易于修改。本文即为对Lombok常见注解的介绍及对生成的代码的展示。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装Lombok"><a href="#安装Lombok" class="headerlink" title="安装Lombok"></a>安装Lombok</h2><p>&emsp;&emsp;在菜单栏依次选择<code>File</code>-&gt;<code>Settings</code>-&gt;<code>Plugins</code>，输入<code>Lombok</code>搜索该插件，得到搜索结果选择Lombok进行安装即可。安装完毕提示重启即安装成功。</p>
<p><img src="/images/data/20200816144238.jpeg"></p>
<p>&emsp;&emsp;Maven项目中引入Lombok依赖的编译支持，在pom文件中的<code>dependences</code>里添加即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ul>
<li>@Data</li>
</ul>
<ul>
<li>@Setter</li>
<li>@Getter</li>
<li>@Log4j</li>
<li>@AllArgsConstructor</li>
<li>@NoArgsConstructor</li>
<li>@EqualsAndHashCode</li>
<li>@NonNull</li>
<li>@Cleanup</li>
<li>@ToString</li>
<li>@RequiredArgsConstructor</li>
<li>@Value</li>
<li>@SneakyThrows</li>
<li>@Synchronized</li>
</ul>
<h2 id="注解作用"><a href="#注解作用" class="headerlink" title="注解作用"></a>注解作用</h2><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p>注解在<strong>类</strong>上，提供类所有属性的get和set方法，此外还提供了equals、canEqual、toString方法以及默认构造函数</p>
<p><img src="/images/data/20200816115230.png" alt="img"></p>
<h3 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h3><ul>
<li>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>以及所有属性的<strong>set</strong>方法</li>
<li>注解在<strong>属性</strong>上，提供类的<strong>默认构造函数</strong>以及所有属性的<strong>set</strong>方法</li>
</ul>
<p><img src="/images/data/20200816125332.png" alt="image-20200816125332552"></p>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>以及所有属性的<strong>get</strong>方法</p>
</li>
<li><p>注解在<strong>属性</strong>上，提供类的<strong>默认构造函数</strong>以及所有属性的<strong>get</strong>方法</p>
<p><img src="/images/data/20200816145537.png" alt="image-20200816125753543"></p>
</li>
</ul>
<h3 id="Log4j"><a href="#Log4j" class="headerlink" title="@Log4j"></a>@Log4j</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>以及该类的日志对象</p>
<p>如果项目中没有对应的日志依赖，建议pom文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.jms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jdmk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmxtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jmx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmxri<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  <img src="/images/data/20200816131455.png"></p>
<h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h3><ul>
<li><p>注解在<strong>类</strong>上，提供含类全部属性的<strong>构造函数</strong></p>
<p><img src="/images/data/20200816132129.png" alt="image-20200816132129118"></p>
</li>
</ul>
<h3 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong></p>
<p><img src="/images/data/20200816132510.png" alt="image-20200816132510412"></p>
</li>
</ul>
<h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>、<strong>equals</strong>方法、<strong>canEqual</strong>方法、<strong>HashCode</strong>方法</p>
<p><img src="/images/data/20200816132954.png" alt="image-20200816132954099"></p>
</li>
</ul>
<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>以及如果有属性为NULL则抛<strong>NullPointException</strong></p>
</li>
<li><p>注解在<strong>属性</strong>上，提供类的<strong>默认构造函数</strong>以及该属性为NULL则抛<strong>NullPointException</strong></p>
<p><img src="/images/data/20200816135351.png" alt="image-20200816133630219"></p>
</li>
</ul>
<h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><ul>
<li><p>注解在<strong>属性</strong>上，注解在那种使用完需要<code>close</code>的对象，会自动在finally里代码块中生成<code>close</code>代码</p>
<p><img src="/images/data/20200816135523.png" alt="image-20200816135522627"></p>
</li>
</ul>
<h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><ul>
<li><p>注解在<strong>类</strong>上，提供类的<strong>默认构造函数</strong>以及**toString()**方法</p>
<p><img src="/images/data/20200816135750.png" alt="image-20200816135750664"></p>
</li>
</ul>
<h3 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h3><ul>
<li><p>注解在<strong>属性</strong>上，提供类中<strong>final</strong>修饰和**@NONULL<strong>注解的所有属性的</strong>构造函数**</p>
<p><img src="/images/data/20200816140650.png" alt="image-20200816140650718"></p>
</li>
</ul>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul>
<li><p>注解在<strong>类</strong>上，提供含类全部属性的<strong>构造函数</strong>以及<strong>get()**、</strong>equals()<strong>、</strong>hashCode()<strong>、</strong>toString()**方法</p>
<p><img src="/images/data/20200816142559.png" alt="image-20200816142558874"></p>
</li>
</ul>
<h3 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h3><ul>
<li><p>注解在<strong>方法</strong>上，作用是将方法内的代码块用try-catch包围起来，并以<code>@SneakyThrows(Exception.class)</code>的形式指定抛出Exception的类型。同时也会生成默认构造函数。</p>
<p><img src="/images/data/20200816142944.png" alt="image-20200816142943894"></p>
</li>
</ul>
<h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><ul>
<li><p>注解在<strong>方法</strong>上，与在方法名左边直接加<strong>synchronized</strong>关键字效果类似，对于静态方法和实例方法，synchornized关键字的锁对象分别是<strong>class</strong>对象和<strong>this</strong>对象；**@Synchronized<strong>则对应的锁对象分别是</strong>私有静态final对象<strong>lock和</strong>私有final对象** lock，同时也可以以<code>@Synchronized(&quot;属性名&quot;)</code>形式自定义锁对象。同时也会生成默认构造函数。</p>
<p><img src="/images/data/20200816163424.png" alt="image-20200816163423807"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows小技巧</title>
    <url>/2021/04/10/5a457db9baf9/</url>
    <content><![CDATA[<h1 id="Windows小技巧"><a href="#Windows小技巧" class="headerlink" title="Windows小技巧"></a>Windows小技巧</h1><p>&emsp;&emsp;用于记录日常使用Windows的小技巧，后期会不断更新。勤于记录，孰能生巧。</p>
<a id="more"></a>

<h2 id="一、巧用命令行"><a href="#一、巧用命令行" class="headerlink" title="一、巧用命令行"></a>一、巧用命令行</h2><h3 id="1、窗口下载命令"><a href="#1、窗口下载命令" class="headerlink" title="1、窗口下载命令"></a>1、窗口下载命令</h3><p>&emsp;&emsp;打开powershell，输入以下命令行即可将网路文件下载至指定文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="variable">$client</span> = new-object System.Net.WebClient</span><br><span class="line">&gt; <span class="variable">$client</span>.DownloadFile(<span class="string">&#x27;https://gitee.com/Courage-He/PicBed/raw/master/data/20210410215919.png&#x27;</span>, <span class="string">&#x27;D:\test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/images/data/20210410215919.png" alt="image-20210410215919216"></p>
<h2 id="二、快捷键巧用"><a href="#二、快捷键巧用" class="headerlink" title="二、快捷键巧用"></a>二、快捷键巧用</h2><h3 id="1、自带截屏功能"><a href="#1、自带截屏功能" class="headerlink" title="1、自带截屏功能"></a>1、自带截屏功能</h3><p>&emsp;&emsp;全局按钮<code>Win</code>+<code>Shift</code>+<code>S</code>即可开启Windows系统自带的截屏功能。</p>
<p><img src="/images/data/20210410220449.png" alt="image-20210410220449531"></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/09/17/840fb5fcea0c/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote>
<p>将原问题拆解成若干子问题，同时保存子问题的答案，使得每个子问题只求解一次，最终获得原问题的答案。</p>
<p>递归问题》重叠子问题》记忆化搜索（自顶向下的解决问题）/动态规划（自底向上的解决问题）</p>
</blockquote>
<a id="more"></a>

<h2 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120. 三角形最小路径和"></a><a href="https://leetcode.cn/problems/triangle/">120. 三角形最小路径和</a></h2><p>给定一个三角形 triangle ，找出自顶向下的最小路径和。</p>
<p>每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：triangle &#x3D; [[2],[3,4],[6,5,7],[4,1,8,3]]</span><br><span class="line">输出：11</span><br><span class="line">解释：如下面简图所示：</span><br><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 6 5 7</span><br><span class="line">4 1 8 3</span><br><span class="line">自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 &#x3D; 11）。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：triangle &#x3D; [[-10]]</span><br><span class="line">输出：-10</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li><code>1 &lt;= triangle.length &lt;= 200</code></li>
<li><code>triangle[0].length == 1</code></li>
<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>
<li><code>-104 &lt;= triangle[i][j] &lt;= 104</code></li>
</ul>
<p>进阶：</p>
<p>你可以只使用<code>O(n)</code>的额外空间（<code>n </code>三角形的总行数）来解决这个问题吗？</p>
<p><strong>解法1：递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归解法(经测试，超过一百层超时)</span></span><br><span class="line">        <span class="keyword">return</span> recursiveMethod(triangle,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursiveMethod</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle,<span class="keyword">int</span> i,<span class="keyword">int</span> j ,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        value = triangle.get(i).get(j)+value;</span><br><span class="line">        <span class="keyword">if</span>(i == triangle.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(recursiveMethod(triangle,i+<span class="number">1</span>,j,value),recursiveMethod(triangle,i+<span class="number">1</span>,j+<span class="number">1</span>,value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法2：递归+记忆化搜索</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   Integer [][] memo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        memo = <span class="keyword">new</span> Integer[triangle.size()][triangle.size()];</span><br><span class="line">        <span class="keyword">return</span> recursiveMethod(triangle,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursiveMethod</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle,<span class="keyword">int</span> i,<span class="keyword">int</span> j ,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == triangle.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value + triangle.get(i).get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = Math.min(recursiveMethod(triangle,i+<span class="number">1</span>,j,value),recursiveMethod(triangle,i+<span class="number">1</span>,j+<span class="number">1</span>,value))+ triangle.get(i).get(j);</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法3：动态规划</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//动态规划 方案</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.size()][triangle.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[triangle.size()-<span class="number">1</span>][i] = triangle.get(triangle.size()-<span class="number">1</span>).get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size()-<span class="number">2</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>; j &lt;=i ; j++) &#123;</span><br><span class="line">                dp[i][j] =Math.min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle.get(i).get(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法4：进阶：动态规划，空间复杂度O(n)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[i] = triangle.get(triangle.size()-<span class="number">1</span>).get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size()-<span class="number">2</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>; j &lt;=i ; j++) &#123;</span><br><span class="line">                dp[j] =Math.min(dp[j],dp[j+<span class="number">1</span>])+triangle.get(i).get(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>专题练习</tag>
      </tags>
  </entry>
  <entry>
    <title>实现SingleTton模式</title>
    <url>/2020/12/30/7959745d4768/</url>
    <content><![CDATA[<h2 id="实现SingleTton模式"><a href="#实现SingleTton模式" class="headerlink" title="实现SingleTton模式"></a>实现SingleTton模式</h2><h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><blockquote>
<p>设计一个类，我们只能生成该类的一个示例。</p>
</blockquote>
<p>只能生成一个实例的是为了实现<code>Singleton</code>(单例)模式的类型，设计模式在面向对象程序设计中起着举足轻重的作用，在面试过程中公司都喜欢问一些与设计模式相关的问题。在常用的设计模式中，<code>Singleton</code>是唯一一个能够用几十行代码完整实现的模式。因此，写一个<code>Singleton</code>的类型是一个很常见的面试题。</p>
<a id="more"></a>

<h3 id="二、参考解法"><a href="#二、参考解法" class="headerlink" title="二、参考解法"></a>二、参考解法</h3><h4 id="1、仅适用于单线程环境"><a href="#1、仅适用于单线程环境" class="headerlink" title="1、仅适用于单线程环境"></a>1、仅适用于单线程环境</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> class <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有构造函数，即对外隐藏构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singeleton</span> <span class="title">instance</span> </span>= <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)<span class="comment">//仅当instance 为null时才创建一个实例，以避免重复创建。</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该解法在单线程的时候共工作正常，但在多线程的情况下不适用。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时就不满足单例模式的要求。</p>
<h4 id="2、适用于多线程环境但效率低"><a href="#2、适用于多线程环境但效率低" class="headerlink" title="2、适用于多线程环境但效率低"></a>2、适用于多线程环境但效率低</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有构造函数，即对外隐藏构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(object)&#123;<span class="comment">//每次只允许一个线程进入代码块，因此不会出现多线程下创建同一个实例的情况</span></span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该解法在多线程环境下使用正常，但是并不完美。在执行过程中，每次都需通过<code>getInstance()</code>得到Singleton实例，并且在此方法中都会加上同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应尽量避免</p>
<h4 id="3、加锁前判断实例是否存在"><a href="#3、加锁前判断实例是否存在" class="headerlink" title="3、加锁前判断实例是否存在"></a>3、加锁前判断实例是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有构造函数，即对外隐藏构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(object)&#123;<span class="comment">//每次只允许一个线程进入代码块，因此不会出现多线程下创建同一个实例的情况</span></span><br><span class="line">            	<span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">                	instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        	&#125; </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该解法只有当<code>instance</code>为<code>null</code>即没有创建时，需要加锁操作。当<code>instance</code>已经创建出来之后，则无需加锁。相比于解法二大大提高了效率，但是代码实现起来比较复杂，容易出错。</p>
<h4 id="4、利用静态构造函数"><a href="#4、利用静态构造函数" class="headerlink" title="4、利用静态构造函数"></a>4、利用静态构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有构造函数，即对外隐藏构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();<span class="comment">//静态构造函数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用静态属性、静态代码块的性质，确保只在加载时调用一次。该段代码非常简洁地实现了功能，但是调用静态构造函数地时机并不是由程序员掌控，而是由JVM运行时发现第一次使用一个类型的时候自动调用该类型的静态构造函数。即实例<code>instance</code>并不是第一次调用属性<code>Singleton.getInstance</code>时创建，而是在第一次用到<code>Singleton</code>时创建。（降低内存的使用效率）</p>
<h4 id="5、实现按需创建实例"><a href="#5、实现按需创建实例" class="headerlink" title="5、实现按需创建实例"></a>5、实现按需创建实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有构造函数，即对外隐藏构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Nested.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    stattic <span class="class"><span class="keyword">class</span> <span class="title">Nested</span></span>&#123;<span class="comment">//外部类加载时，静态内部类不会同时加载，而是在调用静态内部类（静态域、静态方法、构造函数）时加载。</span></span><br><span class="line">		<span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>专题练习</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法展示</title>
    <url>/2022/01/09/3770499952d7/</url>
    <content><![CDATA[<h1 id="排序算法展示"><a href="#排序算法展示" class="headerlink" title="排序算法展示"></a>排序算法展示</h1><h2 id="排序定义及其性质"><a href="#排序定义及其性质" class="headerlink" title="排序定义及其性质"></a>排序定义及其性质</h2><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a><a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">一、冒泡排序</a></h3><p>&emsp;&emsp;冒泡排序（Bubble Sort），是一种<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>领域的较简单的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>。</p>
<p>&emsp;&emsp;它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p>
<p>&emsp;&emsp;这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。<a id="more"></a></p>
<h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a><a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">二、选择排序</a></h3><p>&emsp;&emsp;选择排序（Selection sort）是一种简单直观的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>。它的工作原理是：第一次从待排序的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p>
<h3 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a><a href="https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">三、插入排序</a></h3><p>&emsp;&emsp;插入排序（Insertion sort）是一种简单直观且稳定的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——<a href="https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E6%B3%95/612261">插入排序法</a>,算法适用于少量数据的排序，<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/1894057">时间复杂度</a>O(n^2)。是稳定的排序方法。插入算法把要排序的<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/3794097">数组</a>分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p>
<h3 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a><a href="%5Bhttps://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%5D(https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F)">四、希尔排序</a></h3><p>&emsp;&emsp;希尔排序(Shell&#39;s Sort)是<a href="https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/7214992">插入排序</a>的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</p>
<p>&emsp;&emsp;希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025">算法</a>便终止。 </p>
<h3 id="四、归并排序"><a href="#四、归并排序" class="headerlink" title="四、归并排序"></a><a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">四、归并排序</a></h3><p>&emsp;&emsp;归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为**二路<a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6/253741">归并</a>**。归并排序是一种稳定的排序方法。</p>
<h3 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">五、快速排序</a></h3><p>快速排序（Quicksort）是对冒泡排序的一种改进。 </p>
<p>&emsp;&emsp;快速排序由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695">递归</a>进行，以此达到整个数据变成有序<a href="https://baike.baidu.com/item/%E5%BA%8F%E5%88%97/1302588">序列</a></p>
<h2 id="排序算法题目示例："><a href="#排序算法题目示例：" class="headerlink" title="排序算法题目示例："></a>排序算法题目示例：</h2><h3 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75. 颜色分类"></a><a href="https://leetcode-cn.com/problems/sort-colors/">75. 颜色分类</a></h3><h4 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>()-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = nums[j];</span><br><span class="line">				nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">				nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span> = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[<span class="built_in">min</span>] &gt; nums[j]) &#123;</span><br><span class="line">				<span class="built_in">min</span> = j;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">min</span> != i) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = nums[i];</span><br><span class="line">			nums[i] = nums[<span class="built_in">min</span>];</span><br><span class="line">			nums[<span class="built_in">min</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、三路插入排序"><a href="#3、三路插入排序" class="headerlink" title="3、三路插入排序"></a>3、三路插入排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> zero = -<span class="number">1</span>; <span class="comment">//nums[0……zero] =0</span></span><br><span class="line">        <span class="keyword">int</span> two = nums.length; <span class="comment">//nums[two……n) =2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; two;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">2</span>)&#123;</span><br><span class="line">                swap(nums,i,--two);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swap(nums,i++,++zero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h3><h4 id="1、二路归并法"><a href="#1、二路归并法" class="headerlink" title="1、二路归并法"></a>1、二路归并法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] newNums = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">       <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (i&lt;m&amp;&amp;j&lt;n) &#123;</span><br><span class="line">           newNums[k++] = nums1[i] &lt; nums2[j] ? nums1[i++] : nums2[j++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (i &lt; m)&#123;</span><br><span class="line">           newNums[k++] = nums1[i++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">           newNums[k++] = nums2[j++];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> l =<span class="number">0</span>;l&lt; newNums.length;l++)&#123;</span><br><span class="line">           nums1[l] = newNums[l];</span><br><span class="line">           System.out.print(nums1[l]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h3><h4 id="1、冒泡法优化版"><a href="#1、冒泡法优化版" class="headerlink" title="1、冒泡法优化版"></a>1、冒泡法优化版</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = nums.length;</span><br><span class="line">       <span class="keyword">int</span> kk = nums.length - k;</span><br><span class="line">       <span class="keyword">do</span>&#123;</span><br><span class="line">           <span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//排序辅助坐标点 在nums(index……n)中是有序的</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                   <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">                   nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">                   nums[i + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                   index = i;<span class="comment">//记录最后一次交换的坐标</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           n = index;</span><br><span class="line">           <span class="keyword">if</span> (index &lt; kk) <span class="keyword">return</span> nums[kk];</span><br><span class="line">       &#125;<span class="keyword">while</span>(n &gt; <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span> nums[kk];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、快速排序法"><a href="#2、快速排序法" class="headerlink" title="2、快速排序法"></a>2、快速排序法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       quickSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>,k);</span><br><span class="line">       <span class="keyword">return</span> nums[nums.length-k];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums ,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> l = start ,r = end;</span><br><span class="line">       <span class="keyword">int</span> pivort = nums[l];</span><br><span class="line">       <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">           <span class="keyword">while</span>((l&lt;r)&amp;&amp;nums[l]&lt;pivort)</span><br><span class="line">               l++;</span><br><span class="line">           <span class="keyword">while</span>((l&lt;r)&amp;&amp;nums[r]&gt;pivort)</span><br><span class="line">               r--;</span><br><span class="line">           <span class="keyword">if</span>((l&lt;r)&amp;&amp;nums[l]==nums[r])</span><br><span class="line">               l++;</span><br><span class="line">           <span class="keyword">else</span> &#123;                </span><br><span class="line">               <span class="keyword">int</span> temp = nums[l];                </span><br><span class="line">               nums[l] = nums[r];                </span><br><span class="line">               nums[r] = temp;            </span><br><span class="line">           &#125; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>((l-<span class="number">1</span>)&gt;start)quickSort(nums,start,l-<span class="number">1</span>,k);</span><br><span class="line">       <span class="keyword">if</span>((r+<span class="number">1</span>)&lt;end)quickSort(nums,r+<span class="number">1</span>,end,k);</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="912-排序数组"><a href="#912-排序数组" class="headerlink" title="912. 排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/">912. 排序数组</a></h3><h4 id="1、插入排序法"><a href="#1、插入排序法" class="headerlink" title="1、插入排序法"></a>1、插入排序法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length &lt; <span class="number">2</span>)<span class="keyword">return</span> nums;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> current = nums[i];</span><br><span class="line">            <span class="keyword">int</span> j =i-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;nums[j]&gt;current)</span><br><span class="line">                    nums[j+<span class="number">1</span>] = nums[j--];</span><br><span class="line">             nums[j+<span class="number">1</span>] =current; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、希尔排序"><a href="#2、希尔排序" class="headerlink" title="2、希尔排序"></a>2、希尔排序</h4><p>&emsp;&emsp;1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length &lt; <span class="number">2</span>)<span class="keyword">return</span> nums;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> gap =nums.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap =gap/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =gap;i&lt;nums.length;i+=gap)&#123;</span><br><span class="line">                    <span class="keyword">int</span> current = nums[i];</span><br><span class="line">                    <span class="keyword">int</span> j =i-gap;</span><br><span class="line">                    <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;nums[j]&gt;current)&#123;</span><br><span class="line">                            nums[j+gap] = nums[j];</span><br><span class="line">                            j-=gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nums[j+gap] =current; </span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、归并排序"><a href="#3、归并排序" class="headerlink" title="3、归并排序"></a>3、归并排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt; <span class="number">2</span>)<span class="keyword">return</span> nums;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> l,<span class="keyword">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[l]&#125;;</span><br><span class="line">        <span class="keyword">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[]numsLeft = mergeSort(nums,l,mid);<span class="comment">//左有序数组</span></span><br><span class="line">        <span class="keyword">int</span>[]numsRight = mergeSort(nums,mid+<span class="number">1</span>,r);<span class="comment">//右有序数组</span></span><br><span class="line">        <span class="keyword">int</span> []newNums = <span class="keyword">new</span> <span class="keyword">int</span>[numsLeft.length+numsRight.length];<span class="comment">//开辟新有序数组空间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;numsLeft.length&amp;&amp;j&lt;numsRight.length)</span><br><span class="line">            newNums[k++] = numsLeft[i]&lt;numsRight[j]?numsLeft[i++]:numsRight[j++];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;numsLeft.length)</span><br><span class="line">          newNums[k++] = numsLeft[i++];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;numsRight.length)</span><br><span class="line">          newNums[k++] = numsRight[j++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newNums;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>参考：<a href="https://www.cnblogs.com/onepixel/articles/7674659.html"><a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示）</a></a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>专题练习</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 03. 数组中重复的数字</title>
    <url>/2021/01/26/3000b056946c/</url>
    <content><![CDATA[<h1 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a>剑指 Offer 03. 数组中重复的数字</h1><blockquote>
<p>题目来源：剑指Offer03</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></table></figure>


<p>限制：</p>
<ul>
<li><code>2 &lt;= n &lt;= 100000</code></li>
</ul>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>统计重复元素常用方法是使用哈希表，如果统计的是元素明确范围的话建议使用数组。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="哈希表统计"><a href="#哈希表统计" class="headerlink" title="哈希表统计"></a>哈希表统计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               set.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210126002427.png" alt="image-20210126002427040"></p>
<h3 id="数组统计"><a href="#数组统计" class="headerlink" title="数组统计"></a>数组统计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[nums[i]] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                arr[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210201152224.png" alt="image-20210126002415245"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>剑指 Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 04. 二维数组中的查找</title>
    <url>/2021/02/07/9bedcabf0de2/</url>
    <content><![CDATA[<h1 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a>剑指 Offer 04. 二维数组中的查找</h1><blockquote>
<p>题目来源：剑指Offer04</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个 <code>n * m </code>的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>示例:</strong></p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p>给定 <code>target</code> = 5，返回 <code>true</code>。</p>
<p>给定 <code>target</code> = 20，返回 <code>false</code>。</p>
<p><strong>限制：</strong></p>
<p><code>0 &lt;= n &lt;= 1000</code></p>
<p><code>0 &lt;= m &lt;= 1000</code></p>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.length ==<span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//矩阵为空则直接返回false</span></span><br><span class="line">    <span class="keyword">int</span> n = matrix.length;<span class="comment">//计算n</span></span><br><span class="line">    <span class="keyword">int</span> m  = matrix[<span class="number">0</span>].length;<span class="comment">//计算m</span></span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>,j = m-<span class="number">1</span>;<span class="comment">//从矩阵右上角开始排查</span></span><br><span class="line">    <span class="keyword">for</span>(;i&lt;n&amp;&amp;j&gt;=<span class="number">0</span>;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[i][j] == target)<span class="comment">//等于则返回为true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &gt; target)<span class="comment">//大于则比较元素为同行前一个</span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//小于则比较元素为同列下一个</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://gitee.com/Courage-He/PicBed/raw/master/data/20210207204443.png" alt="image-20210207204442425"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>剑指 Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <url>/2021/02/07/6ac5d91209ed/</url>
    <content><![CDATA[<h1 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h1><blockquote>
<p>题目来源：剑指 Offer 06.</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head &#x3D; [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure>



<p><strong>限制：</strong></p>
<p><code>0 &lt;= 链表长度 &lt;= 10000</code></p>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">      <span class="comment">//使用栈完成反转</span></span><br><span class="line">      Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">      ListNode pNode = head;</span><br><span class="line">      <span class="keyword">while</span>(pNode !=<span class="keyword">null</span>)&#123;</span><br><span class="line">          stack.push(pNode.val);</span><br><span class="line">          pNode = pNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span>[]ans = <span class="keyword">new</span> <span class="keyword">int</span>[stack.size()];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;ans.length;i++)</span><br><span class="line">          ans[i]=stack.pop();</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210207220941.png" alt="image-20210207220941087"></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">    <span class="comment">//使用递归完成反转</span></span><br><span class="line">    ListNode pNode = head;</span><br><span class="line">    reverseRecursion(pNode);</span><br><span class="line">    <span class="keyword">int</span>[]ans = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;ans.length;i++)</span><br><span class="line">        ans[i]=list.get(i);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseRecursion</span><span class="params">(ListNode pNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pNode == <span class="keyword">null</span>) </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    reverseRecursion(pNode.next);</span><br><span class="line">    list.add(pNode.val);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210207224552.png" alt="image-20210207224552623"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>剑指 Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <url>/2021/02/07/c56758abfe9d/</url>
    <content><![CDATA[<h1 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h1><blockquote>
<p>题目来源：剑指 Offer 05</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，把字符串 <code>s </code>中的每个空格替换成”<code>%20</code>“。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>



<p><strong>限制：</strong></p>
<p><code>0 &lt;= s 的长度 &lt;= 10000</code></p>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> s.replaceAll(<span class="string">&quot;\\s&quot;</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210207214401.png" alt="image-20210207214401593"></p>
<h3 id="JAVAAPI"><a href="#JAVAAPI" class="headerlink" title="JAVAAPI"></a>JAVAAPI</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">           <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">           <span class="keyword">if</span>(String.valueOf(ch).equals(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">               builder.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               builder.append(ch);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> builder.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210207214339.png" alt="image-20210207214339679"></p>
<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">char</span> [] arr = s.toCharArray();<span class="comment">//数组化</span></span><br><span class="line">    <span class="keyword">int</span> numOfBlank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : arr)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) numOfBlank++;</span><br><span class="line">    <span class="comment">//数组扩容</span></span><br><span class="line">    <span class="keyword">char</span>[] arrNew = <span class="keyword">new</span> <span class="keyword">char</span>[arr.length+numOfBlank*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;arr.length;i++)</span><br><span class="line">        arrNew[i] = arr[i];</span><br><span class="line">    <span class="keyword">int</span> p1 = arr.length-<span class="number">1</span>;<span class="comment">//指向原始字符串的末尾</span></span><br><span class="line">    <span class="keyword">int</span> p2 = arrNew.length-<span class="number">1</span>;<span class="comment">//指向替换之后的字符串的末尾</span></span><br><span class="line">    <span class="keyword">for</span>(;p1!=p2;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrNew[p1] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            arrNew[p2--] = arrNew[p1--];<span class="comment">//</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p1--;</span><br><span class="line">            arrNew[p2--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            arrNew[p2--] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            arrNew[p2--] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(arrNew);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210207214316.png" alt="image-20210207214316139"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>剑指 Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <url>/2021/02/10/c0d1481126c5/</url>
    <content><![CDATA[<h1 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a>剑指 Offer 07. 重建二叉树</h1><blockquote>
<p>题目来源：剑指 Offer 07.</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<p>例如，给出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前序遍历 preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure>

<p>返回如下的二叉树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>


<p>限制：</p>
<p><code>0 &lt;= 节点个数 &lt;= 5000</code></p>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preorder.length ==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">return</span> buildRecursion(preorder, inorder, <span class="number">0</span>, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildRecursion</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootVal = preorder[index];<span class="comment">//根节点值</span></span><br><span class="line">    <span class="keyword">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; rootVal != inorder[index2]; index2++) ;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(inorder[index2]);</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>, right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (index2 &gt; l)</span><br><span class="line">        left = buildRecursion(preorder, inorder, index + <span class="number">1</span>, l, index2 - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (index2 &lt; r)</span><br><span class="line">        right = buildRecursion(preorder, inorder, index + (index2 - l) + <span class="number">1</span>, index2 + <span class="number">1</span>, r);</span><br><span class="line">    root.left = left;</span><br><span class="line">    root.right = right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210210213410.png" alt="image-20210210213354271"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>剑指 Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>1128.等价多米诺骨牌对的数量</title>
    <url>/2021/01/26/f6d039b5ce46/</url>
    <content><![CDATA[<h1 id="1128-等价多米诺骨牌对的数量"><a href="#1128-等价多米诺骨牌对的数量" class="headerlink" title="1128.等价多米诺骨牌对的数量"></a>1128.等价多米诺骨牌对的数量</h1><blockquote>
<p>每日一题：2020-01-26</p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/">https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/</a></p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个由一些多米诺骨牌组成的列表<code> dominoes</code>。</p>
<p>如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。</p>
<p>形式上，<code>dominoes[i] = [a, b] </code>和<code>dominoes[j] = [c, d]</code>等价的前提是 <code>a==c</code> 且<code> b==d</code>，或是 <code>a==d</code> 且<code> b==c</code>。</p>
<p>在 <code>0 &lt;= i &lt; j &lt; dominoes.length</code> 的前提下，找出满足 dominoes[i] 和 dominoes[j] 等价的骨牌对 (i, j) 的数量。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：dominoes &#x3D; [[1,2],[2,1],[3,4],[5,6]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<ul>
<li><code>1 &lt;= dominoes.length &lt;= 40000</code></li>
<li><code>1 &lt;= dominoes [i][j] &lt;= 9</code></li>
</ul>
<a id="more"></a>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>就其题目描述而言，显而易见可以想到暴力循环解题的方法，时间复杂度<code>O(n^2)</code>。提示中有提示数组长度为<code>40000</code>,试想如果不加以利用提示条件必然会导致运行超时。第二条提示是指数组的值为<code>1-9</code>的整数，充分利用这个提示条件则是解题的关键。</p>
<p>本题中我们需要统计所有等价的多米诺骨牌，其中多米诺骨牌使用二元对代表，「等价」的定义是，在允许翻转两个二元对的的情况下，使它们的元素一一对应相等。于是我们不妨直接让每一个二元对都变为指定的格式，即第一维必须不大于第二维。这样两个二元对「等价」当且仅当两个二元对完全相同。注意到二元对中的元素均不大于 99，因此我们可以将每一个二元对拼接成一个两位的正整数，即<code> (x, y) =&gt; 10x + y</code>。这样就无需使用哈希表统计元素数量，而直接使用长度为 100的数组即可。</p>
<p>元素数量统计出来后，求各个元素的等差数列之和即可，<strong>切记</strong>数量为一的不计。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="采用暴力循环法"><a href="#采用暴力循环法" class="headerlink" title="采用暴力循环法"></a>采用暴力循环法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numEquivDominoPairs</span><span class="params">(<span class="keyword">int</span>[][] dominoes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;dominoes.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;dominoes.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dominoes[i][<span class="number">1</span>] == dominoes[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dominoes[i][<span class="number">0</span>] == dominoes[j][<span class="number">0</span>])&#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dominoes[i][<span class="number">1</span>] == dominoes[j][<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dominoes[i][<span class="number">0</span>] == dominoes[j][<span class="number">1</span>])&#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210127002655.png" alt="image-20210127002655515"></p>
<h3 id="采用统计法"><a href="#采用统计法" class="headerlink" title="采用统计法"></a>采用统计法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numEquivDominoPairs</span><span class="params">(<span class="keyword">int</span>[][] dominoes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; dominoes.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = dominoes[i][<span class="number">0</span>] &gt; dominoes[i][<span class="number">1</span>]? (dominoes[i][<span class="number">0</span>]*<span class="number">10</span>+ dominoes[i][<span class="number">1</span>]) :  (dominoes[i][<span class="number">1</span>]*<span class="number">10</span>+ dominoes[i][<span class="number">0</span>]);<span class="comment">//组合成取值最大的十进制数字</span></span><br><span class="line">            arr[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; <span class="number">2</span>) <span class="keyword">continue</span>; </span><br><span class="line">            ans += (arr[i]-<span class="number">1</span>+<span class="number">1</span>)*(arr[i]-<span class="number">1</span>) /<span class="number">2</span>;<span class="comment">//等差数列组合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/data/20210127002558.png" alt="image-20210127002558645"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>第328场周赛</title>
    <url>/2023/01/20/3140beef8a39/</url>
    <content><![CDATA[<h3 id="第328场周赛"><a href="#第328场周赛" class="headerlink" title="第328场周赛"></a>第328场周赛</h3><h4 id="01-数组元素和与数字和的绝对差"><a href="#01-数组元素和与数字和的绝对差" class="headerlink" title="01. 数组元素和与数字和的绝对差"></a><a href="https://leetcode.cn/problems/difference-between-element-sum-and-digit-sum-of-an-array/">01. 数组元素和与数字和的绝对差</a></h4><p>简单题，暴力即可。</p>
<p><code>num%10</code>代表获取该数的个位数字</p>
<p><code>num/10</code>代表该数缩小10倍，原个位数字抹掉了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">differenceOfSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            sum1+= nums[i];</span><br><span class="line">            <span class="keyword">while</span>(nums[i] !=<span class="number">0</span> )&#123;</span><br><span class="line">                sum2 += nums[i] % <span class="number">10</span>;</span><br><span class="line">                nums[i] = nums[i] / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(sum1-sum2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="02-子矩阵元素加-1"><a href="#02-子矩阵元素加-1" class="headerlink" title="02.子矩阵元素加 1"></a><a href="https://leetcode.cn/problems/increment-submatrices-by-one/">02.子矩阵元素加 1</a></h4><p><strong>一维前缀和</strong>：<code>int[] prefixSum</code>用于用于存储前缀和数组，<code>prefixSum[i]</code>代表<code>nums[0,i-1]</code>之和；任意区间<code>nums[l,r]</code>之和为<code>prefixSum[r+1]-prefixSum[l]</code>。可用于一维数组任意区间快速求和，时间复杂度O(1)</p>
<p>相关题目：<a href="https://leetcode.cn/problems/range-sum-query-immutable/">303. 区域和检索 - 数组不可变</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution02_303</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] prefixSum;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            prefixSum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;prefixSum.length;i++)</span><br><span class="line">                prefixSum[i] = prefixSum[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> prefixSum[right+<span class="number">1</span>]-prefixSum[left];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>一维差分</strong>：结合一维前缀和的公式，如果需要对任意区间<code>nums[l,r]</code>进行加操作，只需对<code>prefixSum[r+1]</code>加操作且<code>prefixSum[l]</code>进行减操作，反之亦然。可用于快速对一维数组的任意区间进行加/减操作，时间复杂度O(1)</p>
<p><strong>二维前缀和</strong>：可用于二维数组任意区间快速求和，时间复杂度O(1)</p>
<p><img src="/images/data/1641658840-YrICJa-image-16763875836859.png" alt="1641658840-YrICJa-image"></p>
<p>相关题目：<a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/">304. 二维区域和检索 - 矩阵不可变</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution02_304_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrixSum;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            matrixSum = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length+<span class="number">1</span>][matrix[<span class="number">0</span>].length+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = matrix.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = matrix[<span class="number">0</span>].length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                    matrixSum[i][j] =  matrix[i][j] + matrixSum[i+<span class="number">1</span>][j]+matrixSum[i][j+<span class="number">1</span>]-matrixSum[i+<span class="number">1</span>][j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  matrixSum[row1][col1]-matrixSum[row2+<span class="number">1</span>][col1]-matrixSum[row1][col2+<span class="number">1</span>]+matrixSum[row2+<span class="number">1</span>][col2+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>二维差分</strong>：可用于快速对二维数组的任意区间进行加/减操作，时间复杂度O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] rangeAddQueries(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] diff = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;queries.length;i++)&#123;</span><br><span class="line">            diff[queries[i][<span class="number">0</span>]][queries[i][<span class="number">1</span>]]++;</span><br><span class="line">            diff[queries[i][<span class="number">0</span>]][queries[i][<span class="number">3</span>]+<span class="number">1</span>]--;</span><br><span class="line">            diff[queries[i][<span class="number">2</span>]+<span class="number">1</span>][queries[i][<span class="number">1</span>]]--;</span><br><span class="line">            diff[queries[i][<span class="number">2</span>]+<span class="number">1</span>][queries[i][<span class="number">3</span>]+<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++) diff[i][j]+=diff[i][j-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) diff[i][j]+=diff[i-<span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) ans[i][j] = diff[i][j];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="03-统计好子数组的数目"><a href="#03-统计好子数组的数目" class="headerlink" title="03.统计好子数组的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-good-subarrays/">03.统计好子数组的数目</a></h4><p>同向双指针，由Map保存窗口中的数字出现的次数，窗口中相等值的的数目为<code>pairs</code>。</p>
<p>首先枚举子数组右端点<code>right</code>，那么<code>paris</code>增加<code>map.getOrDefault(nums[right],0)</code>；枚举至<code>paris&gt;=k</code>即代表该窗口中子数组符合好子数组；然后看左端点<code>left</code>端点最大可以到多少，如果去掉左端点，pairs没有小于k，就可以移动左端点。</p>
<p>由于左端点及其左边的都可以是好子数组的左端点，所以每个右端点对应的答案个数为<code>left+1</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">countGood</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pairs =<span class="number">0</span>,left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            pairs += map.getOrDefault(num,<span class="number">0</span>);</span><br><span class="line">            map.merge(num,<span class="number">1</span>,Integer::sum);</span><br><span class="line">            <span class="keyword">while</span>(pairs-map.get(nums[left])+<span class="number">1</span>&gt;=k)&#123;</span><br><span class="line">                pairs -= map.merge(nums[left++],-<span class="number">1</span>,Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pairs&gt;=k) ans+=left+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="04-最大价值和与最小价值和的差值"><a href="#04-最大价值和与最小价值和的差值" class="headerlink" title="04.最大价值和与最小价值和的差值"></a><a href="https://leetcode.cn/problems/difference-between-maximum-and-minimum-price-sum/">04.最大价值和与最小价值和的差值</a></h4><p>待做~</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/02/18/55b1ea89765a/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h2><table>
<thead>
<tr>
<th>名称</th>
<th>端口号码</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>FTP(文件传输协议)</td>
<td>20</td>
<td>数据传输端口</td>
</tr>
<tr>
<td>FTP(文件传输协议)</td>
<td>21</td>
<td>控制端口</td>
</tr>
<tr>
<td>SSH(Secure Shell)</td>
<td>22</td>
<td></td>
</tr>
<tr>
<td>Telnet(远程登陆协议)</td>
<td>23</td>
<td>被SSH所取代</td>
</tr>
<tr>
<td>SMTP(简单邮件传输协议)</td>
<td>25</td>
<td>用来发送电子邮件</td>
</tr>
<tr>
<td>DNS( 域名系统)</td>
<td>53</td>
<td>域名转换为的 IP 地址(UDP)</td>
</tr>
<tr>
<td>TFTP(小文件传输协议)</td>
<td>69</td>
<td>(UDP)</td>
</tr>
<tr>
<td>HTTP(超文本传输协议)</td>
<td>80</td>
<td></td>
</tr>
<tr>
<td>pop2(邮局协议版本2)</td>
<td>109</td>
<td>负责邮件接收的协议</td>
</tr>
<tr>
<td>pop3(邮局协议版本3)</td>
<td>110</td>
<td>负责邮件接收的协议</td>
</tr>
<tr>
<td>SFTP(安全文件传输协议)</td>
<td>115</td>
<td></td>
</tr>
<tr>
<td>IMAP(互联网消息存取协议)</td>
<td>143</td>
<td>可用于邮件接收</td>
</tr>
<tr>
<td>SNMP(简单网络管理协议)</td>
<td>161</td>
<td>(UDP)</td>
</tr>
<tr>
<td>HTTPS</td>
<td>443</td>
<td>HTTP+SSL</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学海无涯</category>
      </categories>
  </entry>
  <entry>
    <title>第 98 双周赛&amp;第333场周赛 | 归并排序、动态规划</title>
    <url>/2023/02/19/f91a1cafe11e/</url>
    <content><![CDATA[<h3 id="第-98-场双周赛"><a href="#第-98-场双周赛" class="headerlink" title="第 98 场双周赛"></a>第 98 场双周赛</h3><p>本周同时参加了第98场双周赛和第333场双周赛，因此本文将两场比赛的题目一起整理如下！</p>
<h4 id="01-替换一个数字后的最大差值"><a href="#01-替换一个数字后的最大差值" class="headerlink" title="01.替换一个数字后的最大差值"></a><a href="https://leetcode.cn/problems/maximum-difference-by-remapping-a-digit/">01.替换一个数字后的最大差值</a></h4><p>暴力枚举，找出所有可能的最大值、最小值即可得到答案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution01</span> </span>&#123;</span><br><span class="line">	<span class="comment">//暴力枚举</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMaxDifference</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String s = String.valueOf(num);</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//获取最大值</span></span><br><span class="line">            <span class="keyword">int</span> digitMax = Integer.parseInt(s.replace((<span class="keyword">char</span>)i,<span class="string">&#x27;9&#x27;</span>));</span><br><span class="line">            max = max&gt;digitMax?max:digitMax;</span><br><span class="line">            <span class="comment">//获取最小值</span></span><br><span class="line">            <span class="keyword">int</span> digitMin = Integer.parseInt(s.replace((<span class="keyword">char</span>)i,<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            min = min&lt;digitMin?min:digitMin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max-min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="02-修改两个元素的最小分数"><a href="#02-修改两个元素的最小分数" class="headerlink" title="02.修改两个元素的最小分数"></a><a href="https://leetcode.cn/problems/minimum-score-by-changing-two-elements/">02.修改两个元素的最小分数</a></h4><p>脑筋急转弯</p>
<p>首先将<code>nums[0,len]</code>进行排序，最大得分为<code>max(nums[i])-max(nums[0])</code>；当有两个数相等时，则最小得分为0。因为可以修改两个元素，只需要修改后的数字存在<code>nums</code>中，最小得分必然为0，因此答案取决于最大得分。要么减小数组中的最大值，要么增大数组中的最小值。</p>
<p>其中有三种修改方案：</p>
<p><code>nums[0],nums[1]</code>赋值为<code>nums[2]</code>，最大值为：<code>nums[len-1]-nums[2]</code>;</p>
<p><code>nums[len-1],nums[len-2]</code>赋值为<code>nums[len-3]</code>，最大值为：<code>nums[len-3]-nums[1]</code>;</p>
<p><code>nums[len-1]</code>赋值为<code>nums[len-2]</code>,<code>nums[0]</code>赋值为<code>nums[1]</code>，最大值为：<code>nums[len-2]-nums[1]</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimizeSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> max1 =nums[len-<span class="number">2</span>] - nums[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max2= nums[len-<span class="number">1</span>]-nums[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> max3= nums[len-<span class="number">3</span>]-nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = Math.min(Math.min(max1,max2),max3);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="03-最小无法得到的或值"><a href="#03-最小无法得到的或值" class="headerlink" title="03.最小无法得到的或值"></a><a href="https://leetcode.cn/problems/minimum-impossible-or/">03.最小无法得到的或值</a></h4><p>题目描述中提到使用或运算，因此要多向二进制想想！</p>
<p>1-&gt;1,2-&gt;10,3-&gt;11,4-&gt;100,5-&gt;101,6-&gt;110,7-&gt;111,8-&gt;1000。</p>
<p>通过规律容易发现， 2^i^  无法由比它小的数字通过或运算得到，因此只需要从小到大判断2^i^  是否存在即可得到答案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minImpossibleOR</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//hash表，数组去重，快速定位，</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;Integer.MAX_VALUE;i &lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(i)) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="04-更新数组后处理求和查询"><a href="#04-更新数组后处理求和查询" class="headerlink" title="04.更新数组后处理求和查询"></a><a href="https://leetcode.cn/problems/handling-sum-queries-after-update/">04.更新数组后处理求和查询</a></h4><p>待做~</p>
<h3 id="第333场周赛"><a href="#第333场周赛" class="headerlink" title="第333场周赛"></a>第333场周赛</h3><h4 id="01-合并两个二维数组-求和法"><a href="#01-合并两个二维数组-求和法" class="headerlink" title="01.合并两个二维数组 - 求和法"></a><a href="https://leetcode.cn/problems/merge-two-2d-arrays-by-summing-values/">01.合并两个二维数组 - 求和法</a></h4><p><strong>解法1：归并排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution01</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">//归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][]  mergeArrays(<span class="keyword">int</span>[][] nums1, <span class="keyword">int</span>[][] nums2) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length &amp;&amp; j&lt;nums2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i][<span class="number">0</span>] == nums2[j][<span class="number">0</span>])&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums1[i][<span class="number">0</span>],nums1[i][<span class="number">1</span>]+ nums2[j][<span class="number">1</span>]&#125;);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums1[i][<span class="number">0</span>] &lt; nums2[j][<span class="number">0</span>])&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums1[i][<span class="number">0</span>],nums1[i][<span class="number">1</span>]&#125;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums2[j][<span class="number">0</span>],nums2[j][<span class="number">1</span>]&#125;);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums1[i][<span class="number">0</span>],nums1[i][<span class="number">1</span>]&#125;);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;nums2.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums2[j][<span class="number">0</span>],nums2[j][<span class="number">1</span>]&#125;);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：Map集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//map 集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][]  mergeArrays(<span class="keyword">int</span>[][] nums1, <span class="keyword">int</span>[][] nums2) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        Arrays.asList(nums1).forEach(item -&gt; map.put(item[<span class="number">0</span>],item[<span class="number">1</span>]));</span><br><span class="line">        Arrays.asList(nums2).forEach(item -&gt; &#123;map.put(item[<span class="number">0</span>],item[<span class="number">1</span>]+map.getOrDefault(item[<span class="number">0</span>],<span class="number">0</span>));&#125;);</span><br><span class="line">        <span class="keyword">int</span> ans[][] = <span class="keyword">new</span> <span class="keyword">int</span>[map.size()][<span class="number">2</span>],i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()) &#123;</span><br><span class="line">            ans[i++] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="02-将整数减少到零需要的最少操作数"><a href="#02-将整数减少到零需要的最少操作数" class="headerlink" title="02.将整数减少到零需要的最少操作数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-reduce-an-integer-to-0/">02.将整数减少到零需要的最少操作数</a></h4><p>解法1：贪心法</p>
<p>将整数转换为二进制字符串，从右往左数连续1的子串，如字串只有1个1则改为0，多个1则将子串全部改为0，子串前1位则改为1。  </p>
<p>39：100111 -&gt; 101000 -&gt; 100000 -&gt; 0</p>
<p>54：110110 -&gt; 111000 -&gt; 1000000 -&gt; 0</p>
<p>27：11011 -&gt; 11111 -&gt;100000 -&gt; 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution02</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        String binary = Integer.toBinaryString(n);</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(binary);</span><br><span class="line">        <span class="keyword">int</span> len = binary.length();</span><br><span class="line">        <span class="keyword">int</span> i =len-<span class="number">1</span>,j=len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(builder.charAt(i) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; i==j)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(builder.charAt(i) == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(builder.charAt(i) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; i&lt;j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    builder.replace(i,i,<span class="string">&quot;1&quot;</span>);;</span><br><span class="line">                    ans++;</span><br><span class="line">                    j=i;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j-i == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    j=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j-i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解法2：枚举，记忆化搜索</strong></p>
<p><code>(n &amp; n-1) == 0</code>判断n是否为2的幂</p>
<p><code>n &amp; -n</code> 得到<code>lowbit</code>(二进制中最小的1)</p>
<p>如39：100111 &amp; (11001) = 1</p>
<p>问题转换为要么<code>+lowbit</code>要么<code>-lowbit</code>的选择问题，因此可通过记忆化搜索寻找最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000</span>];</span><br><span class="line">    <span class="comment">//记忆化搜索</span></span><br><span class="line">    <span class="comment">//回溯，枚举是+2^k,还是-2^k</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((n &amp; n-<span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//2的幂次方</span></span><br><span class="line">        <span class="keyword">int</span> lowbit = n &amp; -n;</span><br><span class="line">        <span class="keyword">if</span>(arr[lowbit] == <span class="number">0</span>)&#123;</span><br><span class="line">            arr[lowbit] = Math.min(dfs(n+lowbit),dfs(n-lowbit))+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[lowbit];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="03-无平方子集计数"><a href="#03-无平方子集计数" class="headerlink" title="03.无平方子集计数"></a><a href="https://leetcode.cn/problems/count-the-number-of-square-free-subsets/">03.无平方子集计数</a></h4><p>待做~</p>
<p>思路：01背包</p>
<h4 id="04-找出对应-LCP-矩阵的字符串"><a href="#04-找出对应-LCP-矩阵的字符串" class="headerlink" title="04.找出对应 LCP 矩阵的字符串"></a><a href="https://leetcode.cn/problems/find-the-string-with-lcp/">04.找出对应 LCP 矩阵的字符串</a></h4><p>待做~</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之各种树(二叉树、AVL树、红黑树、B、B+树)</title>
    <url>/2023/02/27/e5ee594c5418/</url>
    <content><![CDATA[<h1 id="数据结构之各种树-二叉树、AVL树、红黑树、B、B-树"><a href="#数据结构之各种树-二叉树、AVL树、红黑树、B、B-树" class="headerlink" title="数据结构之各种树(二叉树、AVL树、红黑树、B、B+树)"></a>数据结构之各种树(二叉树、AVL树、红黑树、B、B+树)</h1><h2 id="二叉查找树树"><a href="#二叉查找树树" class="headerlink" title="二叉查找树树"></a>二叉查找树树</h2><p><strong>性质：</strong></p>
<p>1、任意节点左子树不为空，则左子树的值均小于根节点的值；<br>2、任意节点右子树不为空，则右子树的值均大于于根节点的值；<br>3、任意节点的左右子树也分别是二叉查找树；<br>4、没有键值相等的节点；</p>
<p><strong>图示：</strong></p>
<p><strong>二叉查找树</strong>按照<strong>中序遍历</strong>即从小到大分布：1，3，4，6，7，8，10，13，14</p>
<p><img src="images/data/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p>
<p><strong>局限：</strong></p>
<p>极端情况如下，会退化成为一个N个急待你的线性链表</p>
<p><img src="images/data/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png" alt="二叉搜索树"></p>
<h2 id="AVL树-二叉平衡树"><a href="#AVL树-二叉平衡树" class="headerlink" title="AVL树(二叉平衡树)"></a>AVL树(二叉平衡树)</h2><p><strong>性质：</strong></p>
<p>1、满足二叉查找树的性质<br>2、平衡条件必须满足（所有节点的左右子树高度差不超过 1）。</p>
<p>不管我们是执行插入还是删除操作，只要不满足上面的条件，就要通过旋转来保持平衡，而旋转是非常耗时的，由此我们可以知道 AVL 树适合用于插入删除次数比较少，但查找多的情况。</p>
<p><strong>图示：</strong></p>
<p><img src="images/data/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91.png" alt="二叉平衡树"></p>
<p><strong>局限性：</strong></p>
<p>由于维护这种高度平衡所付出的代价比从中获得的效率收益还大，故而实际的应用不多，更多的地方是用追求局部而不是非常严格整体平衡的红黑树。当然，如果应用场景中对插入删除不频繁，只是对查找要求较高，那么 AVL 还是较优于红黑树。</p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><strong>性质：</strong></p>
<ol>
<li>每个节点非红即黑；</li>
<li>根节点总是黑色的；</li>
<li>每个叶子节点都是黑色的空节点（NIL节点）；</li>
<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>
<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li>
</ol>
<p><strong>图示：</strong></p>
<p><img src="images/data/%E4%B8%8B%E8%BD%BD-16775008946984.png" alt="下载"></p>
<p><strong>应用：</strong></p>
<p>TreeMap,TreeSet以及JDK1.8的HashMap底层</p>
<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p><strong>性质：</strong></p>
<p>1、定义任意非叶子结点最多只有 M 个儿子，且 M&gt;2；<br>2、根结点的儿子数为 [2, M]；<br>3、除根结点以外的非叶子结点的儿子数为 [M/2, M]；<br>4、每个结点存放至少 M/2-1（取上整）和至多 M-1 个关键字；（至少 2 个关键字）<br>5、非叶子结点的关键字个数 = 指向儿子的指针个数 - 1；<br>6、非叶子结点的关键字：K [1], K [2], …, K [M-1]；且 K [i] &lt; K [i+1]；<br>7、非叶子结点的指针：P [1], P [2], …, P [M]；其中 P [1] 指向关键字小于 K [1] 的子树，P [M] 指向关键字大于 K [M-1] 的子树，其它 P [i] 指向关键字属于 (K [i-1], K [i]) 的子树；<br>8、所有叶子结点位于同一层；</p>
<p><strong>图示：</strong></p>
<p><img src="images/data/B%E6%A0%91.jpg" alt="B树"></p>
<h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p><strong>性质：</strong></p>
<p>1、非叶子节点的子树指针与关键字个数相同；<br>2、非叶子节点的子树指针 p [i], 指向关键字值属于 [k [i],k [i+1]] 的子树.(B 树是开区间，也就是说 B 树不允许关键字重复，B + 树允许重复)；<br>3、为所有叶子节点增加一个链指针；<br>4、所有关键字都在叶子节点出现 (稠密索引). (且链表中的关键字恰好是有序的)；<br>5、非叶子节点相当于是叶子节点的索引 (稀疏索引), 叶子节点相当于是存储 (关键字) 数据的数据层；<br>6、更适合于文件系统；</p>
<p><strong>图示：</strong></p>
<p><img src="images/data/B+%E6%A0%91.jpg" alt="B+树"></p>
<p><strong>应用：</strong></p>
<p>B和B+树主要用作文件系统以及数据库做索引</p>
<h2 id="B-树-amp-B-树区别"><a href="#B-树-amp-B-树区别" class="headerlink" title="B 树&amp; B+树区别"></a>B 树&amp; B+树区别</h2><ul>
<li>B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li>
<li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li>
<li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li>
</ul>
<p>参考：<a href="https://learnku.com/articles/52909">https://learnku.com/articles/52909</a></p>
<p>参考：<a href="https://javaguide.cn/database/mysql/mysql-index.html">https://javaguide.cn/database/mysql/mysql-index.html</a></p>
<p>参考：<a href="https://www.tianxiaobo.com/2018/01/11/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/">https://www.tianxiaobo.com/2018/01/11/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</a></p>
]]></content>
      <categories>
        <category>学海无涯</category>
      </categories>
  </entry>
</search>
